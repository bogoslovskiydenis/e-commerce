import { AuthProvider } from 'react-admin';

export interface User {
    id: string;
    username: string;
    email: string;
    fullName: string;
    role: 'SUPER_ADMIN' | 'ADMINISTRATOR' | 'MANAGER' | 'CRM_MANAGER';
    permissions: string[];
    avatar?: string;
    active: boolean;
    twoFactorEnabled: boolean;
    lastLogin?: string;
    createdAt: string;
}

// API –±–∞–∑–æ–≤—ã–π URL - –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_BASE_URL = 'http://localhost:3001/api';

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
const TOKEN_KEY = 'auth_token';
const REFRESH_TOKEN_KEY = 'refresh_token';
const USER_KEY = 'user_data';

const getStoredToken = () => localStorage.getItem(TOKEN_KEY);
const getStoredRefreshToken = () => localStorage.getItem(REFRESH_TOKEN_KEY);
const getStoredUser = () => {
    const userData = localStorage.getItem(USER_KEY);
    return userData ? JSON.parse(userData) : null;
};

const storeAuthData = (token: string, refreshToken: string, user: User) => {
    localStorage.setItem(TOKEN_KEY, token);
    localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);
    localStorage.setItem(USER_KEY, JSON.stringify(user));
};

const clearAuthData = () => {
    localStorage.removeItem(TOKEN_KEY);
    localStorage.removeItem(REFRESH_TOKEN_KEY);
    localStorage.removeItem(USER_KEY);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–æ–∫–µ–Ω–∞
const apiRequest = async (endpoint: string, options: RequestInit = {}) => {
    const token = getStoredToken();

    const config: RequestInit = {
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...(token && { Authorization: `Bearer ${token}` }),
            ...options.headers,
        },
    };

    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
    if (response.status === 401) {
        const refreshed = await refreshAuthToken();
        if (refreshed) {
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            config.headers = {
                ...config.headers,
                Authorization: `Bearer ${getStoredToken()}`,
            };
            return fetch(`${API_BASE_URL}${endpoint}`, config);
        } else {
            // –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
            clearAuthData();
            throw new Error('Session expired');
        }
    }

    return response;
};

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç refresh tokens)
const refreshAuthToken = async (): Promise<boolean> => {
    const refreshToken = getStoredRefreshToken();
    if (!refreshToken) return false;

    try {
        const response = await fetch(`${API_BASE_URL}/auth/refresh`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ refreshToken }),
        });

        if (response.ok) {
            const data = await response.json();
            if (data.success) {
                storeAuthData(data.data.token, data.data.refreshToken, data.data.user);
                return true;
            }
        }
    } catch (error) {
        console.error('Error refreshing token:', error);
    }

    return false;
};

class ApiAuthProvider implements AuthProvider {

    async login({ username, password, twoFactorCode }: {
        username: string;
        password: string;
        twoFactorCode?: string;
    }) {
        try {
            console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API:', { username });

            const response = await fetch(`${API_BASE_URL}/auth/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username,
                    password,
                    twoFactorCode,
                }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            if (!data.success) {
                // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA, –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if (data.requiresTwoFactor) {
                    throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
                }
                throw new Error(data.message || '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const { token, refreshToken, user } = data.data;
            storeAuthData(token, refreshToken, user);

            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', user);

            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            await this.logUserAction('login', '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');

            return Promise.resolve();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            throw error;
        }
    }

    async logout() {
        try {
            const token = getStoredToken();

            if (token) {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –≤—ã—Ö–æ–¥–µ
                await apiRequest('/auth/logout', {
                    method: 'POST',
                });

                // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
                await this.logUserAction('logout', '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        } finally {
            // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            clearAuthData();
        }

        return Promise.resolve();
    }

    async checkAuth() {
        try {
            const token = getStoredToken();
            const user = getStoredUser();

            if (!token || !user) {
                console.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                throw new Error('No auth data');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API
            const response = await apiRequest('/auth/me');

            if (!response.ok) {
                throw new Error('Token invalid');
            }

            const data = await response.json();

            if (!data.success) {
                throw new Error('Auth check failed');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            const apiUser = data.data;
            if (JSON.stringify(apiUser) !== JSON.stringify(user)) {
                localStorage.setItem(USER_KEY, JSON.stringify(apiUser));
            }

            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞:', apiUser);
            return Promise.resolve();

        } catch (error) {
            console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', error);
            clearAuthData();
            throw error;
        }
    }

    async checkError(error: any) {
        const status = error.status;

        if (status === 401 || status === 403) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
            clearAuthData();
            return Promise.reject();
        }

        return Promise.resolve();
    }

    async getPermissions() {
        const user = getStoredUser();
        return user ? user.permissions : [];
    }

    async getIdentity() {
        const user = getStoredUser();

        if (!user) {
            throw new Error('No user data');
        }

        return {
            id: user.id,
            fullName: user.fullName,
            avatar: user.avatar,
            email: user.email,
            role: user.role
        };
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    getCurrentUser(): User | null {
        return getStoredUser();
    }

    hasPermission(permission: string): boolean {
        const user = this.getCurrentUser();
        if (!user) return false;

        return user.permissions.includes(permission) ||
            user.permissions.includes('admin.full_access');
    }

    hasRole(role: string | string[]): boolean {
        const user = this.getCurrentUser();
        if (!user) return false;

        const allowedRoles = Array.isArray(role) ? role : [role];
        return allowedRoles.includes(user.role);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    async getAdminUsers() {
        try {
            const response = await apiRequest('/admin/users');
            const data = await response.json();

            if (data.success) {
                return data.data;
            }

            throw new Error('Failed to fetch users');
        } catch (error) {
            console.error('Error fetching admin users:', error);
            return [];
        }
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private async logUserAction(action: string, description: string) {
        const user = this.getCurrentUser();
        if (!user) return;

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await apiRequest('/admin/logs', {
                method: 'POST',
                body: JSON.stringify({
                    action,
                    description,
                    userAgent: navigator.userAgent,
                }),
            });

            console.log('üìù –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ:', { action, description });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    async getAdminLogs(params?: { page?: number; limit?: number }) {
        try {
            const queryParams = new URLSearchParams();
            if (params?.page) queryParams.append('page', params.page.toString());
            if (params?.limit) queryParams.append('limit', params.limit.toString());

            const response = await apiRequest(`/admin/logs?${queryParams}`);
            const data = await response.json();

            if (data.success) {
                return data.data;
            }

            throw new Error('Failed to fetch logs');
        } catch (error) {
            console.error('Error fetching admin logs:', error);
            return [];
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateProfile(updates: Partial<User>) {
        try {
            const response = await apiRequest('/auth/profile', {
                method: 'PATCH',
                body: JSON.stringify(updates),
            });

            const data = await response.json();

            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const currentUser = getStoredUser();
                if (currentUser) {
                    const updatedUser = { ...currentUser, ...data.data };
                    localStorage.setItem(USER_KEY, JSON.stringify(updatedUser));
                }

                await this.logUserAction('profile_update', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');
                return data.data;
            }

            throw new Error(data.message || 'Failed to update profile');
        } catch (error) {
            console.error('Error updating profile:', error);
            throw error;
        }
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    async changePassword(currentPassword: string, newPassword: string) {
        try {
            const response = await apiRequest('/auth/change-password', {
                method: 'POST',
                body: JSON.stringify({
                    currentPassword,
                    newPassword,
                }),
            });

            const data = await response.json();

            if (data.success) {
                await this.logUserAction('password_change', '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è');
                return true;
            }

            throw new Error(data.message || 'Failed to change password');
        } catch (error) {
            console.error('Error changing password:', error);
            throw error;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA
    async setup2FA() {
        try {
            const response = await apiRequest('/auth/2fa/setup', {
                method: 'POST',
            });

            const data = await response.json();

            if (data.success) {
                return data.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç QR –∫–æ–¥ –∏ —Å–µ–∫—Ä–µ—Ç
            }

            throw new Error(data.message || 'Failed to setup 2FA');
        } catch (error) {
            console.error('Error setting up 2FA:', error);
            throw error;
        }
    }

    async verify2FA(code: string) {
        try {
            const response = await apiRequest('/auth/2fa/verify', {
                method: 'POST',
                body: JSON.stringify({ code }),
            });

            const data = await response.json();

            if (data.success) {
                await this.logUserAction('2fa_enabled', '–í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
                return true;
            }

            throw new Error(data.message || 'Invalid 2FA code');
        } catch (error) {
            console.error('Error verifying 2FA:', error);
            throw error;
        }
    }

    async disable2FA(code: string) {
        try {
            const response = await apiRequest('/auth/2fa/disable', {
                method: 'POST',
                body: JSON.stringify({ code }),
            });

            const data = await response.json();

            if (data.success) {
                await this.logUserAction('2fa_disabled', '–û—Ç–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
                return true;
            }

            throw new Error(data.message || 'Invalid 2FA code');
        } catch (error) {
            console.error('Error disabling 2FA:', error);
            throw error;
        }
    }
}

export const authProvider = new ApiAuthProvider();