import React, { useState, useEffect } from 'react';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import {
    Card,
    CardContent,
    Typography,
    Button,
    Switch,
    FormControlLabel,
    Alert,
    Box,
    Chip,
    CircularProgress
} from '@mui/material';
import { adminApiService, Category } from '../../services/api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
interface NavigationItem {
    id: string;
    name: string;
    type: string;
    showInNavigation: boolean;
    order: number;
    active: boolean;
    productsCount: number;
    isVisible: boolean;
    hasDropdown: boolean;
}

export default function NavigationManager() {
    const [categories, setCategories] = useState<NavigationItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [saving, setSaving] = useState(false);
    const [hasChanges, setHasChanges] = useState(false);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        loadCategories();
    }, []);

    const loadCategories = async () => {
        try {
            setLoading(true);
            setError(null);

            const data = await adminApiService.getNavigationCategories();

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è NavigationItem
            const items: NavigationItem[] = data.map((category, index) => ({
                id: category.id,
                name: category.name,
                type: category.type,
                showInNavigation: category.showInNavigation,
                order: category.order || index,
                active: category.active,
                productsCount: category.productsCount || 0,
                isVisible: category.showInNavigation,
                hasDropdown: (category.productsCount || 0) > 0
            }));

            setCategories(items.sort((a, b) => a.order - b.order));
        } catch (error) {
            console.error('Error loading categories:', error);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        } finally {
            setLoading(false);
        }
    };

    const handleDragEnd = (result: any) => {
        if (!result.destination) return;

        const items = Array.from(categories);
        const [reorderedItem] = items.splice(result.source.index, 1);
        items.splice(result.destination.index, 0, reorderedItem);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞
        const updatedItems = items.map((item, index) => ({
            ...item,
            order: index + 1
        }));

        setCategories(updatedItems);
        setHasChanges(true);
    };

    const toggleNavigation = (categoryId: string) => {
        setCategories(categories.map(cat =>
            cat.id === categoryId
                ? { ...cat, isVisible: !cat.isVisible, showInNavigation: !cat.isVisible }
                : cat
        ));
        setHasChanges(true);
    };

    const toggleDropdown = (categoryId: string) => {
        setCategories(categories.map(cat =>
            cat.id === categoryId
                ? { ...cat, hasDropdown: !cat.hasDropdown }
                : cat
        ));
        setHasChanges(true);
    };

    const saveChanges = async () => {
        try {
            setSaving(true);
            setError(null);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await Promise.all(
                categories.map(category =>
                    adminApiService.updateCategoryNavigation(category.id, {
                        showInNavigation: category.isVisible,
                        order: category.order
                    })
                )
            );

            setHasChanges(false);
            alert('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            console.error('Save error:', error);
            setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        } finally {
            setSaving(false);
        }
    };

    const resetChanges = () => {
        loadCategories();
        setHasChanges(false);
    };

    const getTypeIcon = (type: string) => {
        const icons: Record<string, string> = {
            'balloons': 'üéà',
            'BALLOONS': 'üéà',
            'bouquets': 'üíê',
            'BOUQUETS': 'üíê',
            'gifts': 'üéÅ',
            'GIFTS': 'üéÅ',
            'cups': 'ü•§',
            'CUPS': 'ü•§',
            'sets': 'üì¶',
            'SETS': 'üì¶',
            'events': 'üéâ',
            'EVENTS': 'üéâ',
            'occasions': '‚ú®',
            'OCCASIONS': '‚ú®'
        };
        return icons[type] || 'üìÇ';
    };

    const getTypeLabel = (type: string) => {
        const labels: Record<string, string> = {
            'balloons': '–®–∞—Ä–∏–∫–∏',
            'BALLOONS': '–®–∞—Ä–∏–∫–∏',
            'bouquets': '–ë—É–∫–µ—Ç—ã',
            'BOUQUETS': '–ë—É–∫–µ—Ç—ã',
            'gifts': '–ü–æ–¥–∞—Ä–∫–∏',
            'GIFTS': '–ü–æ–¥–∞—Ä–∫–∏',
            'cups': '–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏',
            'CUPS': '–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏',
            'sets': '–ù–∞–±–æ—Ä—ã',
            'SETS': '–ù–∞–±–æ—Ä—ã',
            'events': '–°–æ–±—ã—Ç–∏—è',
            'EVENTS': '–°–æ–±—ã—Ç–∏—è',
            'occasions': '–ü–æ–≤–æ–¥—ã',
            'OCCASIONS': '–ü–æ–≤–æ–¥—ã'
        };
        return labels[type] || type;
    };

    if (loading) {
        return (
            <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
                <CircularProgress />
                <Typography variant="h6" sx={{ ml: 2 }}>
                    –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...
                </Typography>
            </Box>
        );
    }

    return (
        <Box p={3}>
            <Typography variant="h4" gutterBottom>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            </Typography>

            <Typography variant="body1" color="textSecondary" paragraph>
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —Å–∞–π—Ç–∞
            </Typography>

            {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {error}
                </Alert>
            )}

            {hasChanges && (
                <Alert severity="warning" sx={{ mb: 2 }}>
                    <Box display="flex" justifyContent="space-between" alignItems="center">
                        <span>–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>
                        <Box>
                            <Button onClick={resetChanges} sx={{ mr: 1 }}>
                                –û—Ç–º–µ–Ω–∏—Ç—å
                            </Button>
                            <Button
                                variant="contained"
                                onClick={saveChanges}
                                disabled={saving}
                            >
                                {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                            </Button>
                        </Box>
                    </Box>
                </Alert>
            )}

            <Card>
                <CardContent>
                    <Typography variant="h6" gutterBottom>
                        –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ({categories.length})
                    </Typography>

                    {categories.length === 0 ? (
                        <Typography color="textSecondary">
                            –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏".
                        </Typography>
                    ) : (
                        <DragDropContext onDragEnd={handleDragEnd}>
                            <Droppable droppableId="navigation">
                                {(provided) => (
                                    <div
                                        {...provided.droppableProps}
                                        ref={provided.innerRef}
                                    >
                                        {categories.map((item, index) => (
                                            <Draggable
                                                key={item.id}
                                                draggableId={item.id}
                                                index={index}
                                            >
                                                {(provided, snapshot) => (
                                                    <Card
                                                        ref={provided.innerRef}
                                                        {...provided.draggableProps}
                                                        sx={{
                                                            mb: 1,
                                                            backgroundColor: snapshot.isDragging ? 'action.hover' : 'background.paper',
                                                            cursor: 'default'
                                                        }}
                                                    >
                                                        <CardContent sx={{ py: 2 }}>
                                                            <Box display="flex" alignItems="center" gap={2}>
                                                                {/* Drag handle */}
                                                                <div
                                                                    {...provided.dragHandleProps}
                                                                    style={{
                                                                        cursor: 'move',
                                                                        padding: '4px',
                                                                        color: '#666'
                                                                    }}
                                                                >
                                                                    ‚ãÆ‚ãÆ
                                                                </div>

                                                                {/* Category info */}
                                                                <Box flex={1} display="flex" alignItems="center" gap={2}>
                                                                    <Typography variant="h6">
                                                                        {getTypeIcon(item.type)}
                                                                    </Typography>
                                                                    <Box>
                                                                        <Typography variant="subtitle1">
                                                                            {item.name}
                                                                        </Typography>
                                                                        <Box display="flex" gap={1} alignItems="center">
                                                                            <Chip
                                                                                label={getTypeLabel(item.type)}
                                                                                size="small"
                                                                                variant="outlined"
                                                                            />
                                                                            <Typography variant="caption" color="textSecondary">
                                                                                {item.productsCount} —Ç–æ–≤–∞—Ä–æ–≤
                                                                            </Typography>
                                                                            {!item.active && (
                                                                                <Chip
                                                                                    label="–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                                                                                    size="small"
                                                                                    color="error"
                                                                                />
                                                                            )}
                                                                        </Box>
                                                                    </Box>
                                                                </Box>

                                                                {/* Controls */}
                                                                <Box display="flex" alignItems="center" gap={2}>
                                                                    <FormControlLabel
                                                                        control={
                                                                            <Switch
                                                                                checked={item.hasDropdown}
                                                                                onChange={() => toggleDropdown(item.id)}
                                                                                size="small"
                                                                            />
                                                                        }
                                                                        label="–î—Ä–æ–ø–¥–∞—É–Ω"
                                                                        labelPlacement="top"
                                                                    />

                                                                    <FormControlLabel
                                                                        control={
                                                                            <Switch
                                                                                checked={item.isVisible}
                                                                                onChange={() => toggleNavigation(item.id)}
                                                                                color="primary"
                                                                            />
                                                                        }
                                                                        label="–í –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
                                                                        labelPlacement="top"
                                                                    />

                                                                    <Typography variant="caption" color="textSecondary">
                                                                        #{item.order}
                                                                    </Typography>
                                                                </Box>
                                                            </Box>
                                                        </CardContent>
                                                    </Card>
                                                )}
                                            </Draggable>
                                        ))}
                                        {provided.placeholder}
                                    </div>
                                )}
                            </Droppable>
                        </DragDropContext>
                    )}
                </CardContent>
            </Card>

            <Box mt={3} display="flex" justifyContent="space-between">
                <Button onClick={loadCategories}>
                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                </Button>

                <Button
                    variant="contained"
                    color="primary"
                    onClick={saveChanges}
                    disabled={!hasChanges || saving}
                >
                    {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                </Button>
            </Box>
        </Box>
    );
}