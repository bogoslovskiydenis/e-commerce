import { DataProvider, fetchUtils, DeleteParams, Identifier } from 'react-admin';

// API –±–∞–∑–æ–≤—ã–π URL - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
const API_BASE_URL = 'http://localhost:3001/api';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
const getAuthToken = () => localStorage.getItem('auth_token');

// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
const httpClient = (url: string, options: any = {}) => {
    const token = getAuthToken();

    if (!options.headers) {
        options.headers = new Headers({ Accept: 'application/json' });
    }

    if (token) {
        options.headers.set('Authorization', `Bearer ${token}`);
    }

    return fetchUtils.fetchJson(url, options);
};

// –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫ API endpoints
const RESOURCE_ENDPOINTS: Record<string, string> = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    'products': '/products',
    'categories': '/categories',
    'orders': '/orders',
    'customers': '/customers',
    'callbacks': '/callbacks',
    'comments': '/comments',
    'reviews': '/reviews',

    // –ö–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–∞–π—Ç
    'banners': '/banners',
    'pages': '/pages',
    'navigation': '/navigation',
    'settings': '/settings',

    // –ü—Ä–æ–º–æ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    'promotions': '/promotions',
    'coupons': '/coupons',
    'newsletters': '/newsletters',

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    'admin-users': '/admin/users',
    'admin-logs': '/admin/logs',
    'api-keys': '/admin/api-keys',

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    'analytics': '/analytics',
    'stats': '/stats',
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ react-admin –≤ API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
const convertRAParamsToAPI = (params: any) => {
    const { pagination, sort, filter } = params;

    const apiParams: any = {};

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if (pagination) {
        apiParams.page = pagination.page;
        apiParams.limit = pagination.perPage;
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (sort) {
        apiParams.sortBy = sort.field;
        apiParams.sortOrder = sort.order.toLowerCase();
    }

    // –§–∏–ª—å—Ç—Ä—ã
    if (filter) {
        Object.keys(filter).forEach(key => {
            if (filter[key] !== undefined && filter[key] !== '') {
                apiParams[key] = filter[key];
            }
        });
    }

    return apiParams;
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ API –≤ —Ñ–æ—Ä–º–∞—Ç react-admin
const convertAPIResponseToRA = (response: any, type: string) => {
    if (!response.success) {
        throw new Error(response.error || 'API Error');
    }

    switch (type) {
        case 'getList':
            return {
                data: response.data || [],
                total: response.pagination?.total || response.data?.length || 0
            };
        case 'getOne':
        case 'create':
        case 'update':
            return { data: response.data };
        case 'getMany':
            return { data: response.data || [] };
        case 'delete':
            return { data: { id: response.id } };
        default:
            return response;
    }
};

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è admin-users
const handleAdminUserOperations = async (resource: string, params: any) => {
    const { meta } = params;

    if (resource === 'admin-users' && meta?.operation) {
        switch (meta.operation) {
            case 'changePassword':
                const { json: passwordResponse } = await httpClient(
                    `${API_BASE_URL}/admin/users/${params.id}/change-password`,
                    {
                        method: 'POST',
                        body: JSON.stringify({ newPassword: meta.newPassword }),
                    }
                );
                return { data: passwordResponse.data };

            case 'toggleStatus':
                const { json: statusResponse } = await httpClient(
                    `${API_BASE_URL}/admin/users/${params.id}/toggle-status`,
                    {
                        method: 'POST',
                    }
                );
                return { data: statusResponse.data };

            case 'getRolesAndPermissions':
                const { json: rolesResponse } = await httpClient(
                    `${API_BASE_URL}/admin/users/system/roles-and-permissions`
                );
                return { data: rolesResponse.data };

            case 'bulkOperation':
                const { json: bulkResponse } = await httpClient(
                    `${API_BASE_URL}/admin/users/bulk`,
                    {
                        method: 'POST',
                        body: JSON.stringify({
                            userIds: meta.userIds,
                            operation: meta.bulkOperation
                        }),
                    }
                );
                return { data: bulkResponse.data };

            default:
                throw new Error(`Unknown admin-users operation: ${meta.operation}`);
        }
    }

    return null;
};

// –û—Å–Ω–æ–≤–Ω–æ–π data provider
export const customDataProvider: DataProvider = {
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    getList: async (resource, params) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const specialOperation = await handleAdminUserOperations(resource, params);
        if (specialOperation) return specialOperation;

        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const apiParams = convertRAParamsToAPI(params);
        const query = new URLSearchParams(apiParams).toString();
        const url = `${API_BASE_URL}${endpoint}${query ? `?${query}` : ''}`;

        const { json } = await httpClient(url);
        return convertAPIResponseToRA(json, 'getList');
    },

    // –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
    getOne: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const url = `${API_BASE_URL}${endpoint}/${params.id}`;
        const { json } = await httpClient(url);
        return convertAPIResponseToRA(json, 'getOne');
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ ID
    getMany: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ ID
        const promises = params.ids.map(id =>
            httpClient(`${API_BASE_URL}${endpoint}/${id}`)
        );

        const responses = await Promise.all(promises);
        const data = responses.map(({ json }) => json.data);

        return { data };
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    getManyReference: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const apiParams = convertRAParamsToAPI(params);
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ reference
        apiParams[params.target] = params.id;

        const query = new URLSearchParams(apiParams).toString();
        const url = `${API_BASE_URL}${endpoint}${query ? `?${query}` : ''}`;

        const { json } = await httpClient(url);
        return convertAPIResponseToRA(json, 'getList');
    },

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –û–¢–õ–ê–î–ö–û–ô
    create: async (resource, params) => {
        console.log('üîç DataProvider CREATE called:', {
            resource,
            params: JSON.stringify(params, null, 2)
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const specialOperation = await handleAdminUserOperations(resource, params);
        if (specialOperation) return specialOperation;

        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        if (resource === 'products') {
            console.log('üõçÔ∏è Product creation data:', params.data);

            // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
            const productData = {
                title: params.data.title,
                price: parseFloat(params.data.price) || 0,
                oldPrice: params.data.oldPrice ? parseFloat(params.data.oldPrice) : null,
                brand: params.data.brand || null,
                sku: params.data.sku || null,
                description: params.data.description || null,
                categoryId: params.data.categoryId,
                isActive: params.data.isActive !== false, // default true
                inStock: params.data.inStock !== false,   // default true
                stockQuantity: parseInt(params.data.stockQuantity) || 0,
                images: params.data.images || []
            };

            console.log('üîß Transformed product data:', productData);

            const url = `${API_BASE_URL}${endpoint}`;
            const { json } = await httpClient(url, {
                method: 'POST',
                body: JSON.stringify(productData),
            });

            return convertAPIResponseToRA(json, 'create');
        }

        // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const url = `${API_BASE_URL}${endpoint}`;
        const { json } = await httpClient(url, {
            method: 'POST',
            body: JSON.stringify(params.data),
        });

        return convertAPIResponseToRA(json, 'create');
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    update: async (resource, params) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const specialOperation = await handleAdminUserOperations(resource, params);
        if (specialOperation) return specialOperation;

        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const url = `${API_BASE_URL}${endpoint}/${params.id}`;
        const { json } = await httpClient(url, {
            method: 'PUT',
            body: JSON.stringify(params.data),
        });

        return convertAPIResponseToRA(json, 'update');
    },

    // –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    updateMany: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ
        const promises = params.ids.map(id =>
            httpClient(`${API_BASE_URL}${endpoint}/${id}`, {
                method: 'PATCH',
                body: JSON.stringify(params.data),
            })
        );

        await Promise.all(promises);
        return { data: params.ids };
    },

    // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞
    delete: async <RecordType extends { id: Identifier }>(resource: string, params: DeleteParams<RecordType>) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const url = `${API_BASE_URL}${endpoint}/${params.id}`;
        await httpClient(url, {
            method: 'DELETE',
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        return {
            data: {
                ...params.previousData,
                id: params.id
            } as RecordType
        };
    },

    // –£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
    deleteMany: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ
        const promises = params.ids.map(id =>
            httpClient(`${API_BASE_URL}${endpoint}/${id}`, {
                method: 'DELETE',
            })
        );

        await Promise.all(promises);
        return { data: params.ids };
    },
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å admin-users
export const adminUsersHelpers = {
    // –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    changePassword: async (userId: string, newPassword: string) => {
        return customDataProvider.update('admin-users', {
            id: userId,
            data: {},
            previousData: {},
            meta: { operation: 'changePassword', newPassword }
        });
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    toggleStatus: async (userId: string) => {
        return customDataProvider.update('admin-users', {
            id: userId,
            data: {},
            previousData: {},
            meta: { operation: 'toggleStatus' }
        });
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    getRolesAndPermissions: async () => {
        return customDataProvider.update('admin-users', {
            id: 'system',
            data: {},
            previousData: {},
            meta: { operation: 'getRolesAndPermissions' }
        });
    },

    // –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    bulkOperation: async (userIds: string[], operation: 'activate' | 'deactivate' | 'delete') => {
        return customDataProvider.update('admin-users', {
            id: 'bulk',
            data: {},
            previousData: {},
            meta: { operation: 'bulkOperation', userIds, bulkOperation: operation }
        });
    }
};