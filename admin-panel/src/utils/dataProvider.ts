import { DataProvider, fetchUtils, DeleteParams, DeleteResult, RaRecord } from 'react-admin';

// API –±–∞–∑–æ–≤—ã–π URL
const API_BASE_URL = 'http://localhost:3001/api';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
const getAuthToken = () => localStorage.getItem('auth_token');

// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
const httpClient = (url: string, options: any = {}) => {
    const token = getAuthToken();

    if (!options.headers) {
        options.headers = new Headers({ Accept: 'application/json' });
    }

    if (token) {
        options.headers.set('Authorization', `Bearer ${token}`);
    }

    return fetchUtils.fetchJson(url, options);
};

// HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤
const httpClientFile = (url: string, options: any = {}) => {
    const token = getAuthToken();

    // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData - –±—Ä–∞—É–∑–µ—Ä —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (!options.headers) {
        options.headers = new Headers();
    }

    if (token) {
        options.headers.set('Authorization', `Bearer ${token}`);
    }

    return fetch(url, options);
};

// –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫ API endpoints
const RESOURCE_ENDPOINTS: Record<string, string> = {
    'products': '/products',
    'categories': '/categories',
    'orders': '/orders',
    'customers': '/customers',
    'callbacks': '/callbacks',
    'comments': '/comments',
    'reviews': '/reviews',
    'banners': '/banners',
    'pages': '/pages',
    'navigation': '/navigation',
    'settings': '/settings',
    'promotions': '/promotions',
    'coupons': '/coupons',
    'newsletters': '/newsletters',
    'admin-users': '/admin/users',
    'admin-logs': '/admin/logs',
    'api-keys': '/admin/api-keys',
    'analytics': '/analytics',
    'stats': '/stats',
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ React Admin
const processImageField = async (data: any, fieldName: string) => {
    const imageData = data[fieldName];

    if (!imageData) return null;

    // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
    if (Array.isArray(imageData)) {
        const files = imageData.filter(item => item.rawFile instanceof File);
        return files.length > 0 ? files[0].rawFile : null;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
    if (imageData.rawFile instanceof File) {
        return imageData.rawFile;
    }

    return null;
};

// –°–æ–∑–¥–∞–Ω–∏–µ FormData –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
const createProductFormData = async (data: any): Promise<FormData> => {
    const formData = new FormData();

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    if (data.title) formData.append('title', data.title);
    if (data.price) formData.append('price', data.price.toString());
    if (data.oldPrice) formData.append('oldPrice', data.oldPrice.toString());
    if (data.brand) formData.append('brand', data.brand);
    if (data.sku) formData.append('sku', data.sku);
    if (data.description) formData.append('description', data.description);
    if (data.categoryId) formData.append('categoryId', data.categoryId);

    // –ë—É–ª–µ–≤—ã –ø–æ–ª—è
    formData.append('isActive', data.isActive !== false ? 'true' : 'false');
    formData.append('inStock', data.inStock !== false ? 'true' : 'false');

    // –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    formData.append('stockQuantity', (data.stockQuantity || 0).toString());

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageFile = await processImageField(data, 'image');
    if (imageFile) {
        formData.append('image', imageFile);
        console.log('üì∏ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageFile.name);
    }

    return formData;
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ react-admin –≤ API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
const convertRAParamsToAPI = (params: any) => {
    const { pagination, sort, filter } = params;
    const apiParams: any = {};

    if (pagination) {
        apiParams.page = pagination.page;
        apiParams.limit = pagination.perPage;
    }

    if (sort) {
        apiParams.sortBy = sort.field;
        apiParams.sortOrder = sort.order.toLowerCase();
    }

    if (filter) {
        Object.keys(filter).forEach(key => {
            if (filter[key] !== undefined && filter[key] !== '') {
                apiParams[key] = filter[key];
            }
        });
    }

    return apiParams;
};

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ API –≤ —Ñ–æ—Ä–º–∞—Ç react-admin
const convertAPIResponseToRA = (response: any, type: string) => {
    if (!response.success) {
        throw new Error(response.error || 'API Error');
    }

    switch (type) {
        case 'getList':
            return {
                data: response.data || [],
                total: response.pagination?.total || response.data?.length || 0
            };
        case 'getOne':
        case 'create':
        case 'update':
            return { data: response.data };
        case 'getMany':
            return { data: response.data || [] };
        case 'delete':
            return { data: { id: response.id } };
        default:
            return response;
    }
};

// –û—Å–Ω–æ–≤–Ω–æ–π DataProvider
export const customDataProvider: DataProvider = {
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    getList: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const apiParams = convertRAParamsToAPI(params);
        const query = new URLSearchParams(apiParams).toString();
        const url = `${API_BASE_URL}${endpoint}${query ? `?${query}` : ''}`;

        const { json } = await httpClient(url);
        return convertAPIResponseToRA(json, 'getList');
    },

    // –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
    getOne: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const url = `${API_BASE_URL}${endpoint}/${params.id}`;
        const { json } = await httpClient(url);
        return convertAPIResponseToRA(json, 'getOne');
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ ID
    getMany: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const promises = params.ids.map(id =>
            httpClient(`${API_BASE_URL}${endpoint}/${id}`)
        );

        const responses = await Promise.all(promises);
        const data = responses.map(({ json }) => json.data);

        return { data };
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    getManyReference: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const apiParams = convertRAParamsToAPI(params);
        apiParams[params.target] = params.id;

        const query = new URLSearchParams(apiParams).toString();
        const url = `${API_BASE_URL}${endpoint}${query ? `?${query}` : ''}`;

        const { json } = await httpClient(url);
        return convertAPIResponseToRA(json, 'getList');
    },

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
    create: async (resource, params) => {
        console.log('üîç DataProvider CREATE called:', { resource, params });

        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const url = `${API_BASE_URL}${endpoint}`;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if (resource === 'products') {
            try {
                const formData = await createProductFormData(params.data);

                console.log('üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ FormData –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞');

                const response = await httpClientFile(url, {
                    method: 'POST',
                    body: formData,
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', errorText);
                    throw new Error(`Server error: ${response.status} ${errorText}`);
                }

                const json = await response.json();
                return convertAPIResponseToRA(json, 'create');

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ create products:', error);
                throw error;
            }
        }

        // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const { json } = await httpClient(url, {
            method: 'POST',
            body: JSON.stringify(params.data),
        });

        return convertAPIResponseToRA(json, 'create');
    },

    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    update: async (resource, params) => {
        console.log('üîç DataProvider UPDATE called:', { resource, id: params.id, params });

        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const url = `${API_BASE_URL}${endpoint}/${params.id}`;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if (resource === 'products') {
            try {
                const formData = await createProductFormData(params.data);

                console.log('üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ FormData –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞');

                const response = await httpClientFile(url, {
                    method: 'PUT',
                    body: formData,
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', errorText);
                    throw new Error(`Server error: ${response.status} ${errorText}`);
                }

                const json = await response.json();
                return convertAPIResponseToRA(json, 'update');

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ update products:', error);
                throw error;
            }
        }

        // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const { json } = await httpClient(url, {
            method: 'PUT',
            body: JSON.stringify(params.data),
        });

        return convertAPIResponseToRA(json, 'update');
    },

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
    updateMany: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–µ–ª–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        const promises = params.ids.map(id =>
            httpClient(`${API_BASE_URL}${endpoint}/${id}`, {
                method: 'PUT',
                body: JSON.stringify(params.data),
            })
        );

        await Promise.all(promises);
        return { data: params.ids };
    },

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
    delete: async <RecordType extends RaRecord = any>(resource: string, params: DeleteParams<RecordType>): Promise<DeleteResult<RecordType>> => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const url = `${API_BASE_URL}${endpoint}/${params.id}`;
        await httpClient(url, {
            method: 'DELETE',
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è React Admin
        return { data: params.previousData as RecordType };
    },

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
    deleteMany: async (resource, params) => {
        const endpoint = RESOURCE_ENDPOINTS[resource];
        if (!endpoint) {
            throw new Error(`Unknown resource: ${resource}`);
        }

        const promises = params.ids.map(id =>
            httpClient(`${API_BASE_URL}${endpoint}/${id}`, {
                method: 'DELETE',
            })
        );

        await Promise.all(promises);
        return { data: params.ids };
    },
};