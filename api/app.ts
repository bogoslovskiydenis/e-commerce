import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import dotenv from 'dotenv';
import rateLimit from 'express-rate-limit';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
dotenv.config();

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import { config } from '@/config';
import { prisma, connectDatabase } from '@/config/database';

// –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–æ–≤
import routes from './src/routes/index.js';

// –ò–º–ø–æ—Ä—Ç middleware
import { errorHandler } from '@/middleware/error.middleware';
import { notFound } from '@/middleware/notFound.middleware';
import { requestLogger } from '@/middleware/logging.middleware';

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
import { logger } from '@/utils/logger';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º __filename –∏ __dirname –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º prisma –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { prisma };

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
if (config.security.helmetEnabled) {
    app.use(helmet({
        crossOriginResourcePolicy: { policy: "cross-origin" },
        contentSecurityPolicy: {
            directives: {
                defaultSrc: ["'self'"],
                imgSrc: ["'self'", "data:", "https:"],
                scriptSrc: ["'self'", "'unsafe-inline'"],
                styleSrc: ["'self'", "'unsafe-inline'"],
            },
        },
    }));
}

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if (config.security.corsEnabled) {
    app.use(cors({
        origin: config.frontendUrl,
        credentials: true,
        methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
    }));
}

// Rate limiting
const limiter = rateLimit({
    windowMs: config.security.rateLimitWindow,
    max: config.nodeEnv === 'production' ? config.security.rateLimitMax : 1000, // –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç –≤ dev
    message: {
        error: 'Too many requests',
        message: 'Please try again later'
    },
    standardHeaders: true,
    legacyHeaders: false,
});

app.use(limiter);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
if (config.nodeEnv === 'development') {
    app.use(morgan('dev'));
} else {
    app.use(morgan('combined'));
}

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json({
    limit: '10mb',
    strict: true
}));

app.use(express.urlencoded({
    extended: true,
    limit: '10mb'
}));

// –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(requestLogger);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
app.use('/uploads', express.static(config.upload.path));

// Health check endpoint
app.get('/health', async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await prisma.$queryRaw`SELECT 1`;

        res.json({
            status: 'healthy',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            environment: config.nodeEnv,
            version: process.env.npm_package_version || '1.0.0',
            database: 'connected',
            memory: process.memoryUsage()
        });
    } catch (error) {
        res.status(503).json({
            status: 'unhealthy',
            timestamp: new Date().toISOString(),
            error: error instanceof Error ? error.message : 'Unknown error'
        });
    }
});

// API —Ä–æ—É—Ç—ã
app.use(config.api.prefix, routes);

// 404 middleware
app.use(notFound);

// Error handling middleware (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
app.use(errorHandler);

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        logger.info('üöÄ Starting Balloon Shop API server...');

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if (config.redisUrl) {
            logger.info('üîÑ Connecting to Redis...');
            try {
                const { connectRedis } = await import('./src/config/redis.js');
                await connectRedis();
                logger.info('‚úÖ Redis connected successfully');
            } catch (redisError) {
                logger.warn('‚ö†Ô∏è Redis connection failed, continuing without Redis:', redisError);
            }
        }

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info('üîÑ Connecting to database...');
        await connectDatabase();

        // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        const server = app.listen(config.port, () => {
            logger.info(`üéâ Server is running on port ${config.port}`);
            logger.info(`üåç Environment: ${config.nodeEnv}`);
            logger.info(`üìç API endpoint: http://localhost:${config.port}${config.api.prefix}`);
            logger.info(`üè• Health check: http://localhost:${config.port}/health`);

            if (config.nodeEnv === 'development') {
                logger.info(`üéØ Frontend URL: ${config.frontendUrl}`);
                logger.info(`üìù Logs level: ${config.logging.level}`);
            }
        });

        // Graceful shutdown
        const gracefulShutdown = async (signal: string) => {
            logger.info(`üìù Received ${signal}, shutting down gracefully...`);

            server.close(async () => {
                logger.info('‚úÖ HTTP server closed');

                try {
                    await prisma.$disconnect();
                    logger.info('‚úÖ Database connection closed');
                } catch (error) {
                    logger.error('‚ùå Error closing database connection:', error);
                }

                logger.info('‚úÖ Graceful shutdown completed');
                process.exit(0);
            });

            // –§–æ—Ä—Å–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ graceful shutdown –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                logger.error('‚ùå Graceful shutdown timed out, forcing exit');
                process.exit(1);
            }, 30000);
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
        process.on('SIGINT', () => gracefulShutdown('SIGINT'));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        process.on('unhandledRejection', (reason, promise) => {
            logger.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
        });

        process.on('uncaughtException', (error) => {
            logger.error('‚ùå Uncaught Exception:', error);
            process.exit(1);
        });

    } catch (error) {
        logger.error('‚ùå Failed to start server:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

export default app;