// generateNewHash.js
import bcrypt from 'bcrypt';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function generateAndUpdateHash() {
    try {
        const password = 'admin123';
        console.log('üîê –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è –ø–∞—Ä–æ–ª—è:', password);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
        const saltRounds = 12;
        const newHash = await bcrypt.hash(password, saltRounds);

        console.log('üîë –ù–æ–≤—ã–π —Ö–µ—à:', newHash);
        console.log('üìä –î–ª–∏–Ω–∞ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞:', newHash.length);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
        const testResult = await bcrypt.compare(password, newHash);
        console.log('‚úÖ –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞:', testResult ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');

        if (testResult) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const updatedUser = await prisma.user.update({
                where: { username: 'admin' },
                data: { passwordHash: newHash },
                select: {
                    username: true,
                    email: true,
                    isActive: true
                }
            });

            console.log('üéâ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updatedUser);

            // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
            const finalTest = await bcrypt.compare(password, newHash);
            console.log('üîê –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞—Ä–æ–ª—è:', finalTest ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

generateAndUpdateHash();