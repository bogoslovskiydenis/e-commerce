// scripts/cleanupCategories.mjs
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanupCategories() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categories = await prisma.category.findMany({
            select: {
                id: true,
                name: true,
                slug: true,
                createdAt: true
            },
            orderBy: {
                createdAt: 'asc'
            }
        });

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ slug –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const slugGroups = {};
        categories.forEach(cat => {
            if (!slugGroups[cat.slug]) {
                slugGroups[cat.slug] = [];
            }
            slugGroups[cat.slug].push(cat);
        });

        // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const duplicates = Object.entries(slugGroups)
            .filter(([slug, cats]) => cats.length > 1);

        if (duplicates.length === 0) {
            console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }

        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicates.length}`);

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é)
        for (const [slug, cats] of duplicates) {
            console.log(`\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º slug: "${slug}" (${cats.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)`);

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é)
            const sortedCats = cats.sort((a, b) =>
                new Date(a.createdAt) - new Date(b.createdAt)
            );

            const keepCategory = sortedCats[0];
            const toDelete = sortedCats.slice(1);

            console.log(`‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: ${keepCategory.name} (${keepCategory.id})`);

            for (const cat of toDelete) {
                console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º: ${cat.name} (${cat.id})`);
                await prisma.category.delete({
                    where: { id: cat.id }
                });
            }
        }

        console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const remainingCategories = await prisma.category.findMany({
            select: {
                id: true,
                name: true,
                slug: true,
                type: true
            },
            orderBy: [
                { sortOrder: 'asc' },
                { name: 'asc' }
            ]
        });

        console.log('\nüìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
        remainingCategories.forEach((cat, index) => {
            console.log(`${index + 1}. ${cat.name} (${cat.slug}) - ${cat.type}`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    } finally {
        await prisma.$disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
cleanupCategories();