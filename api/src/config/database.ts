import { PrismaClient } from '@prisma/client';
import { logger } from '@/utils/logger';
import { config } from './index';

// –†–∞—Å—à–∏—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Prisma Client –≤ development
declare global {
    var __prisma: PrismaClient | undefined;
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Prisma Client
export const prisma = globalThis.__prisma ?? new PrismaClient({
    log: [
        {
            emit: 'event',
            level: 'query',
        },
        {
            emit: 'event',
            level: 'error',
        },
        {
            emit: 'event',
            level: 'info',
        },
        {
            emit: 'event',
            level: 'warn',
        },
    ],
    datasources: {
        db: {
            url: config.databaseUrl,
        },
    },
});

// –í development —Ä–µ–∂–∏–º–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
if (config.nodeEnv !== 'production') {
    globalThis.__prisma = prisma;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Prisma
prisma.$on('query', (e) => {
    if (config.logging.enableQueries) {
        logger.debug('Prisma Query', {
            query: e.query,
            params: e.params,
            duration: `${e.duration}ms`,
            timestamp: e.timestamp,
        });
    }
});

prisma.$on('error', (e) => {
    logger.error('Prisma Error', {
        message: e.message,
        target: e.target,
        timestamp: e.timestamp,
    });
});

prisma.$on('info', (e) => {
    logger.info('Prisma Info', {
        message: e.message,
        target: e.target,
        timestamp: e.timestamp,
    });
});

prisma.$on('warn', (e) => {
    logger.warn('Prisma Warning', {
        message: e.message,
        target: e.target,
        timestamp: e.timestamp,
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
export async function connectDatabase(): Promise<void> {
    try {
        await prisma.$connect();
        logger.info('‚úÖ Database connected successfully');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º
        await prisma.$queryRaw`SELECT 1`;
        logger.info('‚úÖ Database health check passed');

    } catch (error) {
        logger.error('‚ùå Database connection failed:', error);
        throw new Error(`Database connection failed: ${error}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function disconnectDatabase(): Promise<void> {
    try {
        await prisma.$disconnect();
        logger.info('‚úÖ Database disconnected successfully');
    } catch (error) {
        logger.error('‚ùå Database disconnection failed:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export async function getDatabaseStatus(): Promise<{
    connected: boolean;
    version?: string;
    error?: string;
}> {
    try {
        const result = await prisma.$queryRaw<Array<{ version: string }>>`
      SELECT version() as version
    `;

        return {
            connected: true,
            version: result[0]?.version || 'Unknown',
        };
    } catch (error) {
        return {
            connected: false,
            error: error instanceof Error ? error.message : 'Unknown error',
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export async function withTransaction<T>(
    callback: (prisma: PrismaClient) => Promise<T>
): Promise<T> {
    return await prisma.$transaction(async (tx) => {
        return await callback(tx as PrismaClient);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–¥–ª—è graceful shutdown)
export async function gracefulShutdown(): Promise<void> {
    logger.info('üîÑ Initiating graceful database shutdown...');

    try {
        await disconnectDatabase();
        logger.info('‚úÖ Graceful database shutdown completed');
    } catch (error) {
        logger.error('‚ùå Error during graceful shutdown:', error);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
process.on('SIGINT', async () => {
    logger.info('üìù Received SIGINT, shutting down gracefully...');
    await gracefulShutdown();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    logger.info('üìù Received SIGTERM, shutting down gracefully...');
    await gracefulShutdown();
    process.exit(0);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default prisma;