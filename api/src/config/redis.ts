import { createClient, RedisClientType } from 'redis';
import { logger } from '../utils/logger';

// –¢–∏–ø—ã –¥–ª—è Redis –∫–ª–∏–µ–Ω—Ç–∞
export type RedisClient = RedisClientType;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis
const redisConfig = {
    url: process.env.REDIS_URL || 'redis://localhost:6379',
    socket: {
        connectTimeout: 60000,
        lazyConnect: true,
        reconnectStrategy: (retries: number) => {
            if (retries > 10) {
                logger.error('‚ùå Redis: Too many connection retries, giving up');
                return false;
            }
            const delay = Math.min(retries * 100, 3000);
            logger.warn(`üîÑ Redis: Reconnecting in ${delay}ms (attempt ${retries})`);
            return delay;
        },
    },
    database: parseInt(process.env.REDIS_DB || '0'),
};

// –°–æ–∑–¥–∞–Ω–∏–µ Redis –∫–ª–∏–µ–Ω—Ç–∞
export const redisClient: RedisClient = createClient(redisConfig);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Redis
redisClient.on('error', (err) => {
    logger.error('‚ùå Redis Client Error:', {
        error: err.message,
        stack: err.stack,
    });
});

redisClient.on('connect', () => {
    logger.info('üîÑ Redis Client Connecting...');
});

redisClient.on('ready', () => {
    logger.info('‚úÖ Redis Client Ready');
});

redisClient.on('end', () => {
    logger.info('üîå Redis Client Connection Ended');
});

redisClient.on('reconnecting', () => {
    logger.warn('üîÑ Redis Client Reconnecting...');
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
export async function connectRedis(): Promise<RedisClient> {
    try {
        if (redisClient.isReady) {
            logger.info('‚úÖ Redis already connected');
            return redisClient;
        }

        await redisClient.connect();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await redisClient.ping();
        logger.info('‚úÖ Redis connected and ping successful');

        return redisClient;
    } catch (error) {
        logger.error('‚ùå Failed to connect to Redis:', error);
        throw new Error(`Redis connection failed: ${error}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Redis
export async function disconnectRedis(): Promise<void> {
    try {
        if (redisClient.isOpen) {
            await redisClient.quit();
            logger.info('‚úÖ Redis disconnected gracefully');
        }
    } catch (error) {
        logger.error('‚ùå Error disconnecting from Redis:', error);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await redisClient.disconnect();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Redis
export async function getRedisStatus(): Promise<{
    connected: boolean;
    version?: string;
    memory?: string;
    uptime?: number;
    error?: string;
}> {
    try {
        if (!redisClient.isReady) {
            return { connected: false, error: 'Client not ready' };
        }

        const info = await redisClient.info();
        const lines = info.split('\r\n');

        const version = lines.find(line => line.startsWith('redis_version:'))?.split(':')[1];
        const memory = lines.find(line => line.startsWith('used_memory_human:'))?.split(':')[1];
        const uptime = lines.find(line => line.startsWith('uptime_in_seconds:'))?.split(':')[1];

        return {
            connected: true,
            version,
            memory,
            uptime: uptime ? parseInt(uptime) : undefined,
        };
    } catch (error) {
        return {
            connected: false,
            error: error instanceof Error ? error.message : 'Unknown error',
        };
    }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
export class RedisCache {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å TTL
    static async set(key: string, value: any, ttlSeconds?: number): Promise<void> {
        try {
            const serializedValue = JSON.stringify(value);

            if (ttlSeconds) {
                await redisClient.setEx(key, ttlSeconds, serializedValue);
            } else {
                await redisClient.set(key, serializedValue);
            }

            logger.debug(`‚úÖ Redis: Set key "${key}" with TTL ${ttlSeconds || 'none'}`);
        } catch (error) {
            logger.error(`‚ùå Redis: Failed to set key "${key}":`, error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    static async get<T = any>(key: string): Promise<T | null> {
        try {
            const value = await redisClient.get(key);

            if (value === null) {
                logger.debug(`üîç Redis: Key "${key}" not found`);
                return null;
            }

            const parsed = JSON.parse(value);
            logger.debug(`‚úÖ Redis: Retrieved key "${key}"`);
            return parsed;
        } catch (error) {
            logger.error(`‚ùå Redis: Failed to get key "${key}":`, error);
            return null;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    static async del(key: string): Promise<boolean> {
        try {
            const result = await redisClient.del(key);
            logger.debug(`‚úÖ Redis: Deleted key "${key}"`);
            return result > 0;
        } catch (error) {
            logger.error(`‚ùå Redis: Failed to delete key "${key}":`, error);
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
    static async exists(key: string): Promise<boolean> {
        try {
            const result = await redisClient.exists(key);
            return result > 0;
        } catch (error) {
            logger.error(`‚ùå Redis: Failed to check existence of key "${key}":`, error);
            return false;
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TTL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
    static async expire(key: string, ttlSeconds: number): Promise<boolean> {
        try {
            const result = await redisClient.expire(key, ttlSeconds);
            return result;
        } catch (error) {
            logger.error(`‚ùå Redis: Failed to set TTL for key "${key}":`, error);
            return false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    static async keys(pattern: string): Promise<string[]> {
        try {
            return await redisClient.keys(pattern);
        } catch (error) {
            logger.error(`‚ùå Redis: Failed to get keys with pattern "${pattern}":`, error);
            return [];
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    static async clearPattern(pattern: string): Promise<number> {
        try {
            const keys = await redisClient.keys(pattern);
            if (keys.length === 0) return 0;

            const result = await redisClient.del(keys);
            logger.info(`‚úÖ Redis: Cleared ${result} keys matching pattern "${pattern}"`);
            return result;
        } catch (error) {
            logger.error(`‚ùå Redis: Failed to clear pattern "${pattern}":`, error);
            return 0;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default redisClient;
