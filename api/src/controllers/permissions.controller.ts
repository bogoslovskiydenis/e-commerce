import { Request, Response } from 'express';
import { logger } from '@/utils/logger';

// –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
export const ALL_PERMISSIONS = [
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    'users.create', 'users.edit', 'users.delete', 'users.view',

    // –¢–æ–≤–∞—Ä—ã
    'products.create', 'products.edit', 'products.delete', 'products.view',
    'products.import', 'products.export',

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    'categories.create', 'categories.edit', 'categories.delete', 'categories.view',

    // –ó–∞–∫–∞–∑—ã
    'orders.view', 'orders.edit', 'orders.delete', 'orders.create',
    'orders.export', 'orders.refund',

    // –ö–ª–∏–µ–Ω—Ç—ã
    'customers.view', 'customers.edit', 'customers.delete', 'customers.export',

    // –û—Ç–∑—ã–≤—ã
    'reviews.view', 'reviews.edit', 'reviews.delete', 'reviews.moderate',

    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    'callbacks.view', 'callbacks.edit', 'callbacks.delete',

    // –°–∞–π—Ç –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    'website.banners', 'website.pages', 'website.settings', 'website.navigation',

    // –°–∫–∏–¥–∫–∏ –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    'promotions.create', 'promotions.edit', 'promotions.view', 'promotions.delete',

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    'analytics.view', 'analytics.basic', 'analytics.marketing', 'analytics.advanced',

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ
    'logs.view', 'api_keys.manage', 'admin.full_access',

    // Email –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    'emails.send', 'emails.templates', 'loyalty.manage',

    // –§–∞–π–ª—ã
    'files.upload', 'files.delete', 'files.manage'
];

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø –î–õ–Ø –†–û–õ–ï–ô
export const ROLE_PERMISSIONS = {
    // –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –≤—Å–µ –ø—Ä–∞–≤–∞
    SUPER_ADMIN: ALL_PERMISSIONS,

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
    ADMINISTRATOR: [
        // –¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        'products.create', 'products.edit', 'products.delete', 'products.view', 'products.import', 'products.export',
        'categories.create', 'categories.edit', 'categories.delete', 'categories.view',

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        'users.create', 'users.edit', 'users.view',

        // –°–∞–π—Ç –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        'website.banners', 'website.pages', 'website.navigation', 'website.settings',

        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ñ–∞–π–ª—ã
        'analytics.view', 'files.upload', 'files.manage'
    ],

    // ‚úÖ –ú–ï–ù–ï–î–ñ–ï–† - —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    MANAGER: [
        // üì¶ –¢–û–í–ê–†–´ - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (–∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è)
        'products.create', 'products.edit', 'products.view', 'products.import',

        // üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (–∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è)
        'categories.create', 'categories.edit', 'categories.view',

        // üìã –ó–ê–ö–ê–ó–´ - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        'orders.view', 'orders.edit', 'orders.create',

        // üìû –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨
        'callbacks.view', 'callbacks.edit',

        // ‚≠ê –û–¢–ó–´–í–´ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è
        'reviews.view', 'reviews.edit', 'reviews.moderate',

        // üë§ –ö–õ–ò–ï–ù–¢–´ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        'customers.view', 'customers.edit',

        // üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê - –±–∞–∑–æ–≤–∞—è
        'analytics.basic',

        // üìÅ –§–ê–ô–õ–´ - –∑–∞–≥—Ä—É–∑–∫–∞
        'files.upload'
    ],

    // CRM –ú–µ–Ω–µ–¥–∂–µ—Ä - –∫–ª–∏–µ–Ω—Ç—ã –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
    CRM_MANAGER: [
        // üë• –ö–õ–ò–ï–ù–¢–´ - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
        'customers.view', 'customers.edit', 'customers.export',

        // üéØ –ü–†–û–ú–û–ö–û–î–´ –ò –°–ö–ò–î–ö–ò
        'promotions.create', 'promotions.edit', 'promotions.view',

        // ‚úâÔ∏è EMAIL –ú–ê–†–ö–ï–¢–ò–ù–ì
        'emails.send', 'emails.templates', 'loyalty.manage',

        // üìä –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê
        'analytics.marketing',

        // üì¶ –¢–û–í–ê–†–´ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
        'products.view',

        // üìÇ –ö–ê–¢–ï–ì–û–†–ò–ò - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
        'categories.view'
    ]
};

// ===== –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô =====

export class PermissionsController {

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    async getAllPermissions(req: Request, res: Response) {
        try {
            const permissionsByCategory = {
                users: ALL_PERMISSIONS.filter(p => p.startsWith('users.')),
                products: ALL_PERMISSIONS.filter(p => p.startsWith('products.')),
                categories: ALL_PERMISSIONS.filter(p => p.startsWith('categories.')),
                orders: ALL_PERMISSIONS.filter(p => p.startsWith('orders.')),
                customers: ALL_PERMISSIONS.filter(p => p.startsWith('customers.')),
                reviews: ALL_PERMISSIONS.filter(p => p.startsWith('reviews.')),
                callbacks: ALL_PERMISSIONS.filter(p => p.startsWith('callbacks.')),
                website: ALL_PERMISSIONS.filter(p => p.startsWith('website.')),
                promotions: ALL_PERMISSIONS.filter(p => p.startsWith('promotions.')),
                analytics: ALL_PERMISSIONS.filter(p => p.startsWith('analytics.')),
                system: ALL_PERMISSIONS.filter(p => p.startsWith('logs.') || p.startsWith('api_keys.') || p.startsWith('admin.')),
                emails: ALL_PERMISSIONS.filter(p => p.startsWith('emails.') || p.startsWith('loyalty.')),
                files: ALL_PERMISSIONS.filter(p => p.startsWith('files.'))
            };

            res.json({
                success: true,
                data: {
                    all: ALL_PERMISSIONS,
                    byCategory: permissionsByCategory,
                    total: ALL_PERMISSIONS.length
                }
            });
        } catch (error) {
            logger.error('Get permissions error:', error);
            res.status(500).json({
                error: 'Internal server error'
            });
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –∏ –∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    async getRoles(req: Request, res: Response) {
        try {
            const rolesWithStats = Object.entries(ROLE_PERMISSIONS).map(([role, permissions]) => ({
                role,
                permissions,
                permissionsCount: permissions.length,
                hasFullAccess: permissions.includes('admin.full_access'),
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–µ–π
                description: this.getRoleDescription(role)
            }));

            res.json({
                success: true,
                data: {
                    roles: rolesWithStats,
                    total: Object.keys(ROLE_PERMISSIONS).length
                }
            });
        } catch (error) {
            logger.error('Get roles error:', error);
            res.status(500).json({
                error: 'Internal server error'
            });
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏
    private getRoleDescription(role: string): string {
        const descriptions: Record<string, string> = {
            'SUPER_ADMIN': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã',
            'ADMINISTRATOR': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∞–π—Ç–∞',
            'MANAGER': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –∑–∞–∫–∞–∑–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
            'CRM_MANAGER': '–†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã'
        };

        return descriptions[role] || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏
    async getRolePermissions(req: Request, res: Response) {
        try {
            const { role } = req.params;
            const roleUpper = role.toUpperCase() as keyof typeof ROLE_PERMISSIONS;

            if (!ROLE_PERMISSIONS[roleUpper]) {
                return res.status(404).json({
                    error: 'Role not found',
                    availableRoles: Object.keys(ROLE_PERMISSIONS)
                });
            }

            const permissions = ROLE_PERMISSIONS[roleUpper];
            const permissionsByCategory = {
                users: permissions.filter(p => p.startsWith('users.')),
                products: permissions.filter(p => p.startsWith('products.')),
                categories: permissions.filter(p => p.startsWith('categories.')),
                orders: permissions.filter(p => p.startsWith('orders.')),
                customers: permissions.filter(p => p.startsWith('customers.')),
                reviews: permissions.filter(p => p.startsWith('reviews.')),
                callbacks: permissions.filter(p => p.startsWith('callbacks.')),
                website: permissions.filter(p => p.startsWith('website.')),
                promotions: permissions.filter(p => p.startsWith('promotions.')),
                analytics: permissions.filter(p => p.startsWith('analytics.')),
                system: permissions.filter(p => p.startsWith('logs.') || p.startsWith('api_keys.') || p.startsWith('admin.')),
                emails: permissions.filter(p => p.startsWith('emails.') || p.startsWith('loyalty.')),
                files: permissions.filter(p => p.startsWith('files.'))
            };

            res.json({
                success: true,
                data: {
                    role: roleUpper,
                    permissions,
                    permissionsByCategory,
                    total: permissions.length,
                    hasFullAccess: permissions.includes('admin.full_access'),
                    description: this.getRoleDescription(roleUpper)
                }
            });
        } catch (error) {
            logger.error('Get role permissions error:', error);
            res.status(500).json({
                error: 'Internal server error'
            });
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    // (getUserPermissions, checkPermissions, getMyPermissions –∏ —Ç.–¥.)
}