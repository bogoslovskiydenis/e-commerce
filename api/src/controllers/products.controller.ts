import { Response } from 'express';
import { prisma } from '../config/database';
import { AuthenticatedRequest } from '../middleware/auth.middleware';

export class ProductsController {
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    async getProducts(req: AuthenticatedRequest, res: Response) {
        try {
            const page = parseInt(req.query.page as string) || 1;
            const limit = parseInt(req.query.limit as string) || 10;
            const sortBy = req.query.sortBy as string || 'createdAt';
            const sortOrder = req.query.sortOrder as string || 'desc';
            const search = req.query.search as string;
            const categoryId = req.query.categoryId as string;

            const skip = (page - 1) * limit;

            console.log('üõçÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î', {
                page, limit, sortBy, sortOrder, search, categoryId
            });

            // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞
            const where: any = {};
            if (search) {
                where.OR = [
                    { title: { contains: search, mode: 'insensitive' } },
                    { description: { contains: search, mode: 'insensitive' } },
                    { brand: { contains: search, mode: 'insensitive' } }
                ];
            }
            if (categoryId) {
                where.categoryId = categoryId;
            }

            const [products, totalCount] = await Promise.all([
                prisma.product.findMany({
                    where,
                    skip,
                    take: limit,
                    orderBy: { [sortBy]: sortOrder },
                    include: {
                        category: {
                            select: { id: true, name: true, slug: true }
                        }
                    }
                }),
                prisma.product.count({ where })
            ]);

            res.json({
                success: true,
                data: products,
                pagination: {
                    page,
                    limit,
                    totalCount,
                    totalPages: Math.ceil(totalCount / limit)
                }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
            res.status(500).json({
                success: false,
                error: 'Internal server error'
            });
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
    async getProduct(req: AuthenticatedRequest, res: Response) {
        try {
            const { id } = req.params;
            console.log('üõçÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID:', id);

            const product = await prisma.product.findUnique({
                where: { id },
                include: {
                    category: {
                        select: { id: true, name: true, slug: true }
                    }
                }
            });

            if (!product) {
                return res.status(404).json({
                    success: false,
                    error: 'Product not found'
                });
            }

            res.json({
                success: true,
                data: product
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            res.status(500).json({
                success: false,
                error: 'Internal server error'
            });
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    async createProduct(req: AuthenticatedRequest, res: Response) {
        try {
            const {
                title,
                description,
                price,
                oldPrice,
                discount, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
                sku,
                categoryId,
                brand,
                isActive = 'true',
                inStock = 'true',
                stockQuantity = '0',
                weight,
                dimensions,
                metaTitle,
                metaDescription,
                slug
            } = req.body;

            console.log('üõçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:', {
                title,
                price,
                oldPrice,
                discount, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û –í –õ–û–ì
                brand,
                sku,
                categoryId,
                stockQuantity,
                hasFile: !!req.file
            });

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!title || !price) {
                return res.status(400).json({
                    success: false,
                    error: 'Title and price are required'
                });
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            let images: string[] = [];
            if (req.file) {
                const imageUrl = `/uploads/${req.file.filename}`;
                images = [imageUrl];
                console.log('üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageUrl);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU
            if (sku) {
                const existingProduct = await prisma.product.findFirst({
                    where: { sku }
                });

                if (existingProduct) {
                    return res.status(400).json({
                        success: false,
                        error: 'Product with this SKU already exists'
                    });
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (categoryId) {
                const categoryExists = await prisma.category.findUnique({
                    where: { id: categoryId }
                });

                if (!categoryExists) {
                    return res.status(400).json({
                        success: false,
                        error: 'Category not found'
                    });
                }
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
            const product = await prisma.product.create({
                data: {
                    title,
                    slug: slug || title.toLowerCase().replace(/\s+/g, '-'),
                    description,
                    price: parseFloat(price),
                    oldPrice: oldPrice ? parseFloat(oldPrice) : null,
                    discount: discount ? parseFloat(discount) : null, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
                    brand,
                    sku,
                    categoryId,
                    images,
                    isActive: isActive === 'true' || isActive === true, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
                    inStock: inStock === 'true' || inStock === true,   // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
                    stockQuantity: parseInt(stockQuantity) || 0,
                    weight: weight ? parseFloat(weight) : null,
                    dimensions,
                    metaTitle,
                    metaDescription
                },
                include: {
                    category: {
                        select: {
                            id: true,
                            name: true,
                            slug: true
                        }
                    }
                }
            });

            console.log('‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω:', product.title);

            res.status(201).json({
                success: true,
                data: product
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            res.status(500).json({
                success: false,
                error: 'Internal server error'
            });
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    async updateProduct(req: AuthenticatedRequest, res: Response) {
        try {
            const { id } = req.params;
            const updateData = { ...req.body };

            console.log('üõçÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', id, Object.keys(updateData), 'hasFile:', !!req.file);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            const existingProduct = await prisma.product.findUnique({
                where: { id }
            });

            if (!existingProduct) {
                return res.status(404).json({
                    success: false,
                    error: 'Product not found'
                });
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if (req.file) {
                const imageUrl = `/uploads/${req.file.filename}`;
                console.log('üì∏ –ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageUrl);
                updateData.images = [imageUrl];
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if (updateData.sku && updateData.sku !== existingProduct.sku) {
                const existingProductWithSku = await prisma.product.findFirst({
                    where: {
                        sku: updateData.sku,
                        id: { not: id }
                    }
                });

                if (existingProductWithSku) {
                    return res.status(400).json({
                        success: false,
                        error: 'Product with this SKU already exists'
                    });
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (updateData.categoryId && updateData.categoryId !== existingProduct.categoryId) {
                const categoryExists = await prisma.category.findUnique({
                    where: { id: updateData.categoryId }
                });

                if (!categoryExists) {
                    return res.status(400).json({
                        success: false,
                        error: 'Category not found'
                    });
                }
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if (updateData.price) updateData.price = parseFloat(updateData.price);
            if (updateData.oldPrice) updateData.oldPrice = parseFloat(updateData.oldPrice);
            if (updateData.discount) updateData.discount = parseFloat(updateData.discount); // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
            if (updateData.stockQuantity) updateData.stockQuantity = parseInt(updateData.stockQuantity);
            if (updateData.weight) updateData.weight = parseFloat(updateData.weight);

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
            if (updateData.isActive !== undefined) {
                updateData.isActive = updateData.isActive === 'true' || updateData.isActive === true;
            }
            if (updateData.inStock !== undefined) {
                updateData.inStock = updateData.inStock === 'true' || updateData.inStock === true;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            const updatedProduct = await prisma.product.update({
                where: { id },
                data: {
                    ...updateData,
                    updatedAt: new Date()
                },
                include: {
                    category: {
                        select: {
                            id: true,
                            name: true,
                            slug: true
                        }
                    }
                }
            });

            console.log('‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedProduct.title);

            res.json({
                success: true,
                data: updatedProduct
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            if (error.code === 'P2025') {
                return res.status(404).json({
                    success: false,
                    error: 'Product not found'
                });
            }
            res.status(500).json({
                success: false,
                error: 'Internal server error'
            });
        }
    }

    // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    async uploadProductImage(req: AuthenticatedRequest, res: Response) {
        try {
            const { id } = req.params;

            if (!req.file) {
                return res.status(400).json({
                    success: false,
                    error: 'No image file provided'
                });
            }

            const imageUrl = `/uploads/${req.file.filename}`;
            console.log('üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', id, imageUrl);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            const updatedProduct = await prisma.product.update({
                where: { id },
                data: {
                    images: [imageUrl],
                    updatedAt: new Date()
                }
            });

            res.json({
                success: true,
                data: {
                    imageUrl,
                    product: updatedProduct
                }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            if (error.code === 'P2025') {
                return res.status(404).json({
                    success: false,
                    error: 'Product not found'
                });
            }
            res.status(500).json({
                success: false,
                error: 'Internal server error'
            });
        }
    }

    // –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
    async deleteProduct(req: AuthenticatedRequest, res: Response) {
        try {
            const { id } = req.params;
            console.log('üõçÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', id);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–∞—Ö
            const orderItemsCount = await prisma.orderItem.count({
                where: { productId: id }
            });

            if (orderItemsCount > 0) {
                return res.status(400).json({
                    success: false,
                    error: `Cannot delete product used in ${orderItemsCount} orders. Archive the product instead.`
                });
            }

            const deletedProduct = await prisma.product.delete({
                where: { id }
            });

            console.log('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω:', deletedProduct.title);

            res.json({
                success: true,
                data: deletedProduct
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
            if (error.code === 'P2025') {
                return res.status(404).json({
                    success: false,
                    error: 'Product not found'
                });
            }
            res.status(500).json({
                success: false,
                error: 'Internal server error'
            });
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async getProductsByCategory(req: AuthenticatedRequest, res: Response) {
        try {
            const { categoryId } = req.params;
            const page = parseInt(req.query.page as string) || 1;
            const limit = parseInt(req.query.limit as string) || 25;

            const skip = (page - 1) * limit;

            console.log('üõçÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryId);

            const [products, totalCount] = await Promise.all([
                prisma.product.findMany({
                    where: {
                        categoryId,
                        isActive: true
                    },
                    skip,
                    take: limit,
                    orderBy: { createdAt: 'desc' },
                    include: {
                        category: {
                            select: { id: true, name: true }
                        }
                    }
                }),
                prisma.product.count({
                    where: {
                        categoryId,
                        isActive: true
                    }
                })
            ]);

            res.json({
                success: true,
                data: products,
                pagination: {
                    page,
                    limit,
                    totalCount,
                    totalPages: Math.ceil(totalCount / limit)
                }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
            res.status(500).json({
                success: false,
                error: 'Internal server error'
            });
        }
    }
}

export const productsController = new ProductsController();