import { Request, Response, NextFunction } from 'express';

export interface AuthenticatedRequest extends Request {
    user?: {
        id: string;
        username: string;
        email: string;
        fullName: string;
        role: string;
        permissions: string[];
        active: boolean;
    };
}

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å auth.routes.ts)
const USERS = [
    {
        id: '1',
        username: 'admin',
        email: 'admin@example.com',
        fullName: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        role: 'SUPER_ADMIN',
        permissions: ['admin.full_access'],
        active: true
    },
    {
        id: '2',
        username: 'manager',
        email: 'manager@example.com',
        fullName: '–ò–≤–∞–Ω –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
        role: 'ADMINISTRATOR',
        permissions: [
            'products.create', 'products.edit', 'products.delete', 'products.view',
            'categories.create', 'categories.edit', 'categories.delete', 'categories.view',
            'users.create', 'users.edit', 'users.view',
            'website.banners', 'website.pages', 'website.navigation',
            'analytics.view'
        ],
        active: true
    },
    {
        id: '3',
        username: 'operator',
        email: 'operator@example.com',
        fullName: '–ê–Ω–Ω–∞ –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤–∞',
        role: 'MANAGER',
        permissions: [
            'orders.view', 'orders.edit',
            'callbacks.view', 'callbacks.edit',
            'reviews.view', 'reviews.edit',
            'customers.view', 'customers.edit',
            'products.view', 'analytics.basic'
        ],
        active: true
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
const getUserFromToken = (token: string) => {
    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å JWT –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        // –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        if (!token.startsWith('token_')) {
            return null;
        }

        const userId = token.split('_')[1];
        const user = USERS.find(u => u.id === userId);

        return user && user.active ? user : null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞:', error);
        return null;
    }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authenticateToken = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    try {
        const authHeader = req.headers.authorization;
        const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

        if (!token) {
            return res.status(401).json({
                success: false,
                error: 'Access token required',
                message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'
            });
        }

        const user = getUserFromToken(token);

        if (!user) {
            return res.status(401).json({
                success: false,
                error: 'Invalid or expired token',
                message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω'
            });
        }

        if (!user.active) {
            return res.status(403).json({
                success: false,
                error: 'Account disabled',
                message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request
        req.user = user;

        console.log('üîì –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:', user.username);
        next();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        return res.status(500).json({
            success: false,
            error: 'Authentication error',
            message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
        });
    }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
export const requirePermission = (permission: string | string[]) => {
    return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'Authentication required',
                message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
            });
        }

        const userPermissions = req.user.permissions;
        const requiredPermissions = Array.isArray(permission) ? permission : [permission];

        // –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
        if (userPermissions.includes('admin.full_access')) {
            console.log('üîê –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (—Å—É–ø–µ—Ä –∞–¥–º–∏–Ω):', req.user.username);
            return next();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        const hasPermission = requiredPermissions.some(perm =>
            userPermissions.includes(perm)
        );

        if (!hasPermission) {
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤:', {
                user: req.user.username,
                required: requiredPermissions,
                current: userPermissions
            });

            return res.status(403).json({
                success: false,
                error: 'Insufficient permissions',
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
                required: requiredPermissions,
                current: userPermissions
            });
        }

        console.log('‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω:', {
            user: req.user.username,
            permission: requiredPermissions
        });

        next();
    };
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
export const requireRole = (roles: string | string[]) => {
    return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'Authentication required',
                message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
            });
        }

        const allowedRoles = Array.isArray(roles) ? roles : [roles];

        if (!allowedRoles.includes(req.user.role)) {
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–æ–ª–∏:', {
                user: req.user.username,
                userRole: req.user.role,
                requiredRoles: allowedRoles
            });

            return res.status(403).json({
                success: false,
                error: 'Insufficient role permissions',
                message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–æ–ª–∏',
                required: allowedRoles,
                current: req.user.role
            });
        }

        console.log('‚úÖ –†–æ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:', {
            user: req.user.username,
            role: req.user.role
        });

        next();
    };
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export const adminActionLogger = (action: string, resourceType: string) => {
    return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
        if (!req.user) {
            return next();
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é json
        const originalJson = res.json;

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é json –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        res.json = function(body) {
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
            if (res.statusCode >= 200 && res.statusCode < 300) {
                logAdminAction(req.user!, action, resourceType, req, body);
            }

            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return originalJson.call(this, body);
        };

        next();
    };
};

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const logAdminAction = (
    user: AuthenticatedRequest['user'],
    action: string,
    resourceType: string,
    req: Request,
    responseBody: any
) => {
    try {
        const logEntry = {
            id: Date.now().toString(),
            userId: user!.id,
            username: user!.username,
            action,
            resourceType,
            resourceId: req.params.id || responseBody?.data?.id || null,
            method: req.method,
            path: req.path,
            ip: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent'),
            timestamp: new Date().toISOString(),
            success: true
        };

        console.log('üìù –î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', logEntry);

        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
export const checkAccountStatus = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
    if (!req.user) {
        return res.status(401).json({
            success: false,
            error: 'Authentication required'
        });
    }

    if (!req.user.active) {
        return res.status(403).json({
            success: false,
            error: 'Account disabled',
            message: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        });
    }

    next();
};

// Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const userRequestCount = new Map<string, { count: number; resetTime: number }>();

export const rateLimitByUser = (maxRequests: number = 100, windowMs: number = 60000) => {
    return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
        if (!req.user) {
            return next();
        }

        const userId = req.user.id;
        const now = Date.now();
        const userLimit = userRequestCount.get(userId);

        if (!userLimit || now > userLimit.resetTime) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            userRequestCount.set(userId, {
                count: 1,
                resetTime: now + windowMs
            });
            return next();
        }

        if (userLimit.count >= maxRequests) {
            return res.status(429).json({
                success: false,
                error: 'Too many requests',
                message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                retryAfter: Math.ceil((userLimit.resetTime - now) / 1000)
            });
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        userLimit.count++;
        next();
    };
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP –∞–¥—Ä–µ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
export const checkIPWhitelist = (allowedIPs: string[] = []) => {
    return (req: Request, res: Response, next: NextFunction) => {
        if (allowedIPs.length === 0) {
            return next(); // –ï—Å–ª–∏ whitelist –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ
        }

        const clientIP = req.ip || req.connection.remoteAddress || '';

        if (!allowedIPs.includes(clientIP)) {
            console.log('‚ùå IP –∞–¥—Ä–µ—Å –Ω–µ –≤ whitelist:', clientIP);
            return res.status(403).json({
                success: false,
                error: 'Access denied',
                message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω —Å –≤–∞—à–µ–≥–æ IP –∞–¥—Ä–µ—Å–∞'
            });
        }

        next();
    };
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
export const checkWorkingHours = (startHour: number = 0, endHour: number = 24) => {
    return (req: Request, res: Response, next: NextFunction) => {
        const currentHour = new Date().getHours();

        if (currentHour < startHour || currentHour >= endHour) {
            return res.status(403).json({
                success: false,
                error: 'Access denied',
                message: `–î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —Å ${startHour}:00 –¥–æ ${endHour}:00`
            });
        }

        next();
    };
};

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö middleware
export {
    getUserFromToken,
    logAdminAction
};