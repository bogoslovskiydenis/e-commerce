import { Router } from 'express';
import { validate } from '../middleware/validation.middleware.js';
import { authenticateToken, AuthenticatedRequest } from '../middleware/auth.middleware.js';
import { z } from 'zod';
import { Request, Response } from 'express';

const router = Router();

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏–Ω–∞
const loginSchema = z.object({
    body: z.object({
        username: z.string().min(1, 'Username is required'),
        password: z.string().min(1, 'Password is required'),
        twoFactorCode: z.string().optional()
    })
});

// –°—Ö–µ–º–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
const changePasswordSchema = z.object({
    body: z.object({
        currentPassword: z.string().min(1, 'Current password is required'),
        newPassword: z.string().min(6, 'New password must be at least 6 characters')
    })
});

// –°—Ö–µ–º–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const updateProfileSchema = z.object({
    body: z.object({
        fullName: z.string().optional(),
        email: z.string().email().optional(),
        avatar: z.string().optional()
    })
});

// –°—Ö–µ–º–∞ –¥–ª—è 2FA –∫–æ–¥–æ–≤
const twoFactorCodeSchema = z.object({
    body: z.object({
        code: z.string().length(6, '2FA code must be 6 digits')
    })
});

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
const USERS = [
    {
        id: '1',
        username: 'admin',
        password: 'admin123', // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–µ—à
        email: 'admin@example.com',
        fullName: '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        role: 'SUPER_ADMIN',
        permissions: ['admin.full_access'],
        active: true,
        twoFactorEnabled: false,
        twoFactorSecret: null,
        lastLogin: null,
        createdAt: '2024-01-01T00:00:00Z'
    },
    {
        id: '2',
        username: 'manager',
        password: 'manager123',
        email: 'manager@example.com',
        fullName: '–ò–≤–∞–Ω –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
        role: 'ADMINISTRATOR',
        permissions: [
            'products.create', 'products.edit', 'products.delete', 'products.view',
            'categories.create', 'categories.edit', 'categories.delete', 'categories.view',
            'users.create', 'users.edit', 'users.view',
            'website.banners', 'website.pages', 'website.navigation',
            'analytics.view'
        ],
        active: true,
        twoFactorEnabled: false,
        twoFactorSecret: null,
        lastLogin: null,
        createdAt: '2024-01-01T00:00:00Z'
    },
    {
        id: '3',
        username: 'operator',
        password: 'operator123',
        email: 'operator@example.com',
        fullName: '–ê–Ω–Ω–∞ –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤–∞',
        role: 'MANAGER',
        permissions: [
            'orders.view', 'orders.edit',
            'callbacks.view', 'callbacks.edit',
            'reviews.view', 'reviews.edit',
            'customers.view', 'customers.edit',
            'products.view', 'analytics.basic'
        ],
        active: true,
        twoFactorEnabled: true,
        twoFactorSecret: 'JBSWY3DPEHPK3PXP', // –ú–æ–∫ —Å–µ–∫—Ä–µ—Ç –¥–ª—è 2FA
        lastLogin: null,
        createdAt: '2024-01-01T00:00:00Z'
    }
];

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
const generateToken = (userId: string) => {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JWT
    return `token_${userId}_${Date.now()}`;
};

const generateRefreshToken = (userId: string) => {
    return `refresh_${userId}_${Date.now()}`;
};

// –õ–æ–≥–∏–Ω
router.post('/login', validate(loginSchema), (req: Request, res: Response) => {
    try {
        const { username, password, twoFactorCode } = req.body;

        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { username });

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = USERS.find(u =>
            (u.username === username || u.email === username) && u.password === password
        );

        if (!user) {
            return res.status(401).json({
                success: false,
                error: 'Invalid credentials',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        if (!user.active) {
            return res.status(403).json({
                success: false,
                error: 'Account disabled',
                message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA
        if (user.twoFactorEnabled) {
            if (!twoFactorCode) {
                return res.json({
                    success: false,
                    requiresTwoFactor: true,
                    message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                });
            }

            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 2FA (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TOTP)
            if (twoFactorCode !== '123456') {
                return res.status(401).json({
                    success: false,
                    error: 'Invalid 2FA code',
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        user.lastLogin = new Date().toISOString();

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        const token = generateToken(user.id);
        const refreshToken = generateRefreshToken(user.id);

        // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const { password: _, twoFactorSecret: __, ...userWithoutSecrets } = user;

        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', userWithoutSecrets);

        res.json({
            success: true,
            message: 'Login successful',
            data: {
                token,
                refreshToken,
                user: userWithoutSecrets
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
router.post('/refresh', (req: Request, res: Response) => {
    try {
        const { refreshToken } = req.body;

        if (!refreshToken || !refreshToken.startsWith('refresh_')) {
            return res.status(401).json({
                success: false,
                error: 'Invalid refresh token'
            });
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        const userId = refreshToken.split('_')[1];
        const user = USERS.find(u => u.id === userId);

        if (!user || !user.active) {
            return res.status(401).json({
                success: false,
                error: 'User not found or inactive'
            });
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
        const newToken = generateToken(user.id);
        const newRefreshToken = generateRefreshToken(user.id);

        const { password: _, twoFactorSecret: __, ...userWithoutSecrets } = user;

        res.json({
            success: true,
            data: {
                token: newToken,
                refreshToken: newRefreshToken,
                user: userWithoutSecrets
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –í—ã—Ö–æ–¥
router.post('/logout', authenticateToken, (req: AuthenticatedRequest, res: Response) => {
    try {
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ blacklist
        console.log('üëã –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user?.username);

        res.json({
            success: true,
            message: 'Logged out successfully'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/me', authenticateToken, (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'User not authenticated'
            });
        }

        const user = USERS.find(u => u.id === req.user!.id);

        if (!user || !user.active) {
            return res.status(401).json({
                success: false,
                error: 'User not found or inactive'
            });
        }

        const { password: _, twoFactorSecret: __, ...userWithoutSecrets } = user;

        res.json({
            success: true,
            data: userWithoutSecrets
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
router.patch('/profile', authenticateToken, validate(updateProfileSchema), (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'User not authenticated'
            });
        }

        const user = USERS.find(u => u.id === req.user!.id);

        if (!user) {
            return res.status(404).json({
                success: false,
                error: 'User not found'
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const { fullName, email, avatar } = req.body;

        if (fullName !== undefined) user.fullName = fullName;
        if (email !== undefined) user.email = email;
        if (avatar !== undefined) user.avatar = avatar;

        const { password: _, twoFactorSecret: __, ...userWithoutSecrets } = user;

        console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:', userWithoutSecrets);

        res.json({
            success: true,
            data: userWithoutSecrets,
            message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
router.post('/change-password', authenticateToken, validate(changePasswordSchema), (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'User not authenticated'
            });
        }

        const user = USERS.find(u => u.id === req.user!.id);

        if (!user) {
            return res.status(404).json({
                success: false,
                error: 'User not found'
            });
        }

        const { currentPassword, newPassword } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        if (user.password !== currentPassword) {
            return res.status(400).json({
                success: false,
                error: 'Invalid current password',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        user.password = newPassword; // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å

        console.log('üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.username);

        res.json({
            success: true,
            message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA
router.post('/2fa/setup', authenticateToken, (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'User not authenticated'
            });
        }

        const user = USERS.find(u => u.id === req.user!.id);

        if (!user) {
            return res.status(404).json({
                success: false,
                error: 'User not found'
            });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç –¥–ª—è 2FA (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å speakeasy)
        const secret = 'JBSWY3DPEHPK3PXP'; // –ú–æ–∫ —Å–µ–∫—Ä–µ—Ç
        user.twoFactorSecret = secret;

        const qrCodeUrl = `otpauth://totp/ShopAdmin:${user.username}?secret=${secret}&issuer=ShopAdmin`;

        console.log('üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA –¥–ª—è:', user.username);

        res.json({
            success: true,
            data: {
                secret,
                qrCodeUrl,
                manualEntryKey: secret
            },
            message: 'QR –∫–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA
router.post('/2fa/verify', authenticateToken, validate(twoFactorCodeSchema), (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'User not authenticated'
            });
        }

        const user = USERS.find(u => u.id === req.user!.id);

        if (!user) {
            return res.status(404).json({
                success: false,
                error: 'User not found'
            });
        }

        const { code } = req.body;

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TOTP –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é)
        if (code !== '123456') {
            return res.status(400).json({
                success: false,
                error: 'Invalid 2FA code',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA'
            });
        }

        // –í–∫–ª—é—á–∞–µ–º 2FA
        user.twoFactorEnabled = true;

        console.log('‚úÖ 2FA –≤–∫–ª—é—á–µ–Ω –¥–ª—è:', user.username);

        res.json({
            success: true,
            message: '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ 2FA:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ 2FA
router.post('/2fa/disable', authenticateToken, validate(twoFactorCodeSchema), (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'User not authenticated'
            });
        }

        const user = USERS.find(u => u.id === req.user!.id);

        if (!user) {
            return res.status(404).json({
                success: false,
                error: 'User not found'
            });
        }

        const { code } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        if (code !== '123456') {
            return res.status(400).json({
                success: false,
                error: 'Invalid 2FA code',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA'
            });
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º 2FA
        user.twoFactorEnabled = false;
        user.twoFactorSecret = null;

        console.log('‚ùå 2FA –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è:', user.username);

        res.json({
            success: true,
            message: '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

export default router;