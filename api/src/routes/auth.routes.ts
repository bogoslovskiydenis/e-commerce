import { Router } from 'express';
import { validate } from '../middleware/validation.middleware.js';
import { authenticateToken, AuthenticatedRequest } from '../middleware/auth.middleware.js';
import { z } from 'zod';
import { Request, Response } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { prisma } from '../config/database.js';
import { config } from '../config/index.js';

const router = Router();

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏–Ω–∞
const loginSchema = z.object({
    body: z.object({
        username: z.string().min(1, 'Username is required'),
        password: z.string().min(1, 'Password is required'),
        twoFactorCode: z.string().optional()
    })
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
const generateToken = (userId: string, username: string, role: string, permissions: string[]) => {
    return jwt.sign(
        {
            id: userId,
            username,
            role,
            permissions
        },
        config.jwtSecret,
        { expiresIn: config.jwtExpiresIn }
    );
};

const generateRefreshToken = (userId: string) => {
    return jwt.sign(
        { id: userId },
        config.jwtRefreshSecret,
        { expiresIn: config.jwtRefreshExpiresIn }
    );
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
const verifyPassword = async (password: string, hash: string): Promise<boolean> => {
    return await bcrypt.compare(password, hash);
};



// –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–Ω endpoint
router.post('/login', validate(loginSchema), async (req: Request, res: Response) => {
    try {
        const { username, password, twoFactorCode } = req.body;

        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { username });

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await prisma.user.findFirst({
            where: {
                OR: [
                    { username: username },
                    { email: username }
                ]
            }
        });

        console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user ? {
            id: user.id,
            username: user.username,
            email: user.email,
            isActive: user.isActive
        } : '–ù–ï –ù–ê–ô–î–ï–ù');

        if (!user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(401).json({
                success: false,
                error: 'Invalid credentials',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å...');
        const passwordValid = await verifyPassword(password, user.passwordHash);
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', passwordValid);

        if (!passwordValid) {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            return res.status(401).json({
                success: false,
                error: 'Invalid credentials',
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        if (!user.isActive) {
            console.log('‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
            return res.status(403).json({
                success: false,
                error: 'Account disabled',
                message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        if (user.twoFactorEnabled) {
            if (!twoFactorCode) {
                return res.json({
                    success: false,
                    requiresTwoFactor: true,
                    message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                });
            }

            if (twoFactorCode !== '123456') {
                return res.status(401).json({
                    success: false,
                    error: 'Invalid 2FA code',
                    message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
                });
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        await prisma.user.update({
            where: { id: user.id },
            data: { lastLogin: new Date() }
        });

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        const token = generateToken(user.id, user.username, user.role, user.permissions);
        const refreshToken = generateRefreshToken(user.id);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try {
            await prisma.userSession.create({
                data: {
                    userId: user.id,
                    refreshToken,
                    expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π
                    ipAddress: req.ip,
                    userAgent: req.get('User-Agent')
                }
            });
        } catch (sessionError) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é:', sessionError.message);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        }

        // –£–±–∏—Ä–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const { passwordHash, twoFactorSecret, ...userWithoutSecrets } = user;

        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', userWithoutSecrets);

        res.json({
            success: true,
            message: 'Login successful',
            data: {
                token,
                refreshToken,
                user: userWithoutSecrets
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error',
            message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/me', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        if (!req.user) {
            return res.status(401).json({
                success: false,
                error: 'User not authenticated'
            });
        }

        const user = await prisma.user.findUnique({
            where: { id: req.user.id }
        });

        if (!user || !user.isActive) {
            return res.status(401).json({
                success: false,
                error: 'User not found or inactive'
            });
        }

        const { passwordHash, twoFactorSecret, ...userWithoutSecrets } = user;

        res.json({
            success: true,
            data: userWithoutSecrets
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –í—ã—Ö–æ–¥
router.post('/logout', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const { refreshToken } = req.body;

        if (refreshToken) {
            try {
                // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await prisma.userSession.deleteMany({
                    where: {
                        refreshToken,
                        userId: req.user?.id
                    }
                });
            } catch (sessionError) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é:', sessionError.message);
            }
        }

        console.log('üëã –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user?.username);

        res.json({
            success: true,
            message: 'Logged out successfully'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

router.post('/create-hash', async (req: Request, res: Response) => {
    try {
        const password = 'admin123';
        const saltRounds = 12;

        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è –ø–∞—Ä–æ–ª—è:', password);

        const hash = await bcrypt.hash(password, saltRounds);
        console.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à:', hash);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç
        const isValid = await bcrypt.compare(password, hash);
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞:', isValid);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const updateResult = await prisma.user.updateMany({
            where: {
                username: {
                    in: ['admin', 'manager', 'operator']
                }
            },
            data: {
                passwordHash: hash
            }
        });

        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', updateResult.count);

        return res.json({
            success: true,
            message: '–ü–∞—Ä–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            data: {
                newHash: hash,
                isValid: isValid,
                updatedUsers: updateResult.count
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞:', error);
        return res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

router.post('/refresh', async (req: Request, res: Response) => {
    try {
        const { refreshToken } = req.body;

        if (!refreshToken) {
            return res.status(401).json({
                success: false,
                error: 'Refresh token required'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh token –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let session;
        try {
            session = await prisma.userSession.findUnique({
                where: { refreshToken },
                include: { user: true }
            });
        } catch (sessionError) {
            console.log('‚ö†Ô∏è UserSession table not found, using simple JWT verify');

            // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º JWT –Ω–∞–ø—Ä—è–º—É—é
            try {
                const decoded = jwt.verify(refreshToken, config.jwtRefreshSecret) as any;
                const user = await prisma.user.findUnique({
                    where: { id: decoded.id }
                });

                if (!user || !user.isActive) {
                    return res.status(401).json({
                        success: false,
                        error: 'User not found or inactive'
                    });
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
                const newToken = generateToken(user.id, user.username, user.role, user.permissions);
                const newRefreshToken = generateRefreshToken(user.id);

                const { passwordHash, twoFactorSecret, ...userWithoutSecrets } = user;

                return res.json({
                    success: true,
                    data: {
                        token: newToken,
                        refreshToken: newRefreshToken,
                        user: userWithoutSecrets
                    }
                });

            } catch (jwtError) {
                return res.status(401).json({
                    success: false,
                    error: 'Invalid refresh token'
                });
            }
        }

        if (!session || session.expiresAt < new Date()) {
            return res.status(401).json({
                success: false,
                error: 'Invalid or expired refresh token'
            });
        }

        const user = session.user;

        if (!user.isActive) {
            return res.status(401).json({
                success: false,
                error: 'User inactive'
            });
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
        const newToken = generateToken(user.id, user.username, user.role, user.permissions);
        const newRefreshToken = generateRefreshToken(user.id);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        await prisma.userSession.update({
            where: { id: session.id },
            data: {
                refreshToken: newRefreshToken,
                expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
            }
        });

        const { passwordHash, twoFactorSecret, ...userWithoutSecrets } = user;

        res.json({
            success: true,
            data: {
                token: newToken,
                refreshToken: newRefreshToken,
                user: userWithoutSecrets
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

router.post('/admin/logs', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        console.log('üìù Admin log request from:', req.user?.username);

        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.json({
            success: true,
            message: 'Log recorded'
        });

    } catch (error) {
        console.error('‚ùå Admin log error:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
router.get('/admin/logs', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        console.log('üìã Get logs request from:', req.user?.username);

        // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
        res.json({
            success: true,
            data: []
        });

    } catch (error) {
        console.error('‚ùå Get logs error:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// DEBUG ENDPOINT - –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
router.post('/debug-login', async (req: Request, res: Response) => {
    try {
        const { username, password } = req.body;

        console.log('üîç DEBUG: Login attempt:', { username, password });

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await prisma.user.findFirst({
            where: {
                OR: [
                    { username: username },
                    { email: username }
                ]
            }
        });

        console.log('üîç DEBUG: User found:', user ? {
            id: user.id,
            username: user.username,
            email: user.email,
            passwordHashStart: user.passwordHash.substring(0, 30),
            isActive: user.isActive
        } : 'NOT FOUND');

        if (!user) {
            return res.json({
                success: false,
                debug: 'User not found',
                searchedUsername: username
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é bcrypt
        console.log('üîç DEBUG: Checking password with bcrypt...');
        console.log('üîç DEBUG: Provided password:', password);
        console.log('üîç DEBUG: Stored hash start:', user.passwordHash.substring(0, 30));

        const passwordValid = await bcrypt.compare(password, user.passwordHash);

        console.log('üîç DEBUG: Bcrypt result:', passwordValid);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const testPassword = 'admin123';
        const testHash = '$2b$12$LQv3c1yqBwEHFx8.9rI2HO2yfuZ/5P8bC2Qht9HQ5/9FG5M6y7K7K';
        const testResult = await bcrypt.compare(testPassword, testHash);

        console.log('üîç DEBUG: Test admin123 against known hash:', testResult);

        return res.json({
            success: true,
            debug: {
                userFound: true,
                username: user.username,
                email: user.email,
                isActive: user.isActive,
                providedPassword: password,
                storedHashStart: user.passwordHash.substring(0, 30),
                bcryptResult: passwordValid,
                testResult: testResult,
                hashMatches: user.passwordHash === testHash
            }
        });

    } catch (error) {
        console.error('‚ùå DEBUG: Error:', error);
        return res.status(500).json({
            success: false,
            debug: 'Exception occurred',
            error: error.message
        });
    }
});

export default router;