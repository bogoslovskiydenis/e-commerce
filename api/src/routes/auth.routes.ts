import { Router } from 'express';
import { validate } from '../middleware/validation.middleware.js';
import { authenticateToken, AuthenticatedRequest } from '../middleware/auth.middleware.js';
import { z } from 'zod';
import { Request, Response } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { prisma } from '../config/database.js';
import { config } from '../config/index.js';

const router = Router();

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏–Ω–∞
const loginSchema = z.object({
    body: z.object({
        username: z.string().min(1, 'Username is required'),
        password: z.string().min(1, 'Password is required'),
        twoFactorCode: z.string().optional()
    })
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
const generateToken = (userId: string, username: string, role: string, permissions: string[]) => {
    return jwt.sign(
        {
            id: userId,
            username,
            role,
            permissions
        },
        config.jwtSecret,
        { expiresIn: config.jwtExpiresIn }
    );
};

const generateRefreshToken = (userId: string) => {
    return jwt.sign(
        { id: userId },
        config.jwtRefreshSecret,
        { expiresIn: config.jwtRefreshExpiresIn }
    );
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
const verifyPassword = async (password: string, hash: string): Promise<boolean> => {
    return await bcrypt.compare(password, hash);
};

// –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–Ω endpoint
router.post('/login', validate(loginSchema), async (req: Request, res: Response) => {
    try {
        const { username, password, twoFactorCode } = req.body;

        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { username });

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await prisma.user.findFirst({
            where: {
                OR: [
                    { username: username },
                    { email: username }
                ]
            }
        });

        console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user ? {
            id: user.id,
            username: user.username,
            email: user.email,
            isActive: user.isActive
        } : 'NOT FOUND');

        if (!user) {
            return res.status(401).json({
                success: false,
                error: 'Invalid credentials'
            });
        }

        if (!user.isActive) {
            return res.status(401).json({
                success: false,
                error: 'Account is deactivated'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –ø–æ–º–æ—â—å—é bcrypt
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
        console.log('üîê –í—Ö–æ–¥—è—â–∏–π –ø–∞—Ä–æ–ª—å:', password);
        console.log('üîê –•–µ—à –∏–∑ –ë–î:', user.passwordHash.substring(0, 50));
        const passwordValid = await verifyPassword(password, user.passwordHash);
        console.log('üîê –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', passwordValid);

        if (!passwordValid) {
            return res.status(401).json({
                success: false,
                error: 'Invalid credentials'
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å 2FA –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (user.twoFactorEnabled) {
            if (!twoFactorCode) {
                return res.status(200).json({
                    success: false,
                    requiresTwoFactor: true,
                    message: 'Two-factor authentication required'
                });
            }

            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ 2FA –∫–æ–¥–∞
            // const verified = speakeasy.totp.verify({...});
            // if (!verified) {
            //     return res.status(401).json({
            //         success: false,
            //         error: 'Invalid two-factor code'
            //     });
            // }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        const token = generateToken(user.id, user.username, user.role, user.permissions || []);
        const refreshToken = generateRefreshToken(user.id);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        await prisma.user.update({
            where: { id: user.id },
            data: {
                lastLogin: new Date()
                // lastLoginIp –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ö–µ–º–µ –ë–î
            }
        });

        // –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const { passwordHash, twoFactorSecret, ...userWithoutSecrets } = user;

        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.username);

        res.json({
            success: true,
            data: {
                token,
                refreshToken,
                user: userWithoutSecrets
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// Logout endpoint
router.post('/logout', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        console.log('üëã –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user?.username);

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å –≤ blacklist

        res.json({
            success: true,
            message: 'Logged out successfully'
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/me', authenticateToken, async (req: AuthenticatedRequest, res: Response) => {
    try {
        const userId = req.user?.id;

        if (!userId) {
            return res.status(401).json({
                success: false,
                error: 'Unauthorized'
            });
        }

        const user = await prisma.user.findUnique({
            where: { id: userId },
            select: {
                id: true,
                username: true,
                email: true,
                fullName: true, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
                role: true,
                permissions: true,
                isActive: true,
                twoFactorEnabled: true,
                lastLogin: true,
                createdAt: true,
                updatedAt: true
            }
        });

        if (!user) {
            return res.status(404).json({
                success: false,
                error: 'User not found'
            });
        }

        res.json({
            success: true,
            data: user
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
});

// Refresh token endpoint
router.post('/refresh', async (req: Request, res: Response) => {
    try {
        const { refreshToken } = req.body;

        if (!refreshToken) {
            return res.status(400).json({
                success: false,
                error: 'Refresh token is required'
            });
        }

        // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è refresh —Ç–æ–∫–µ–Ω–∞
        const decoded = jwt.verify(refreshToken, config.jwtRefreshSecret) as any;

        const user = await prisma.user.findUnique({
            where: { id: decoded.id }
        });

        if (!user || !user.isActive) {
            return res.status(401).json({
                success: false,
                error: 'Invalid refresh token'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        const newToken = generateToken(user.id, user.username, user.role, user.permissions || []);
        const newRefreshToken = generateRefreshToken(user.id);

        const { passwordHash, twoFactorSecret, ...userWithoutSecrets } = user;

        res.json({
            success: true,
            data: {
                token: newToken,
                refreshToken: newRefreshToken,
                user: userWithoutSecrets
            }
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
        res.status(401).json({
            success: false,
            error: 'Invalid refresh token'
        });
    }
});

export default router;