import { PrismaClient } from '@prisma/client';
import seedProducts from './products.seed';

const prisma = new PrismaClient();

async function main() {
    console.log('üöÄ Starting database seeding...');

    try {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
        console.log('üßπ Cleaning existing data...');

        // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
        await prisma.orderItem.deleteMany();
        await prisma.orderStatusLog.deleteMany();
        await prisma.order.deleteMany();
        await prisma.review.deleteMany();
        await prisma.product.deleteMany();
        await prisma.category.deleteMany();
        await prisma.callback.deleteMany();
        await prisma.address.deleteMany();
        await prisma.refreshToken.deleteMany();
        await prisma.user.deleteMany();
        await prisma.banner.deleteMany();
        await prisma.page.deleteMany();
        await prisma.settings.deleteMany();

        console.log('‚úÖ Database cleaned');

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–¥–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await seedProducts();

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        console.log('üë§ Creating admin user...');
        const adminUser = await prisma.user.create({
            data: {
                email: 'admin@balloonshop.com',
                password: '$2b$10$K7L/VQkgf8.3VrT0lQIeHOexNBl7OjJ8gw6rKr/hGz.kKY8sT3QXu', // password: admin123
                firstName: 'Admin',
                lastName: 'User',
                role: 'ADMIN',
                isActive: true,
                emailVerified: true
            }
        });
        console.log(`‚úÖ Admin user created: ${adminUser.email}`);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        console.log('üë§ Creating manager user...');
        const managerUser = await prisma.user.create({
            data: {
                email: 'manager@balloonshop.com',
                password: '$2b$10$K7L/VQkgf8.3VrT0lQIeHOexNBl7OjJ8gw6rKr/hGz.kKY8sT3QXu', // password: admin123
                firstName: 'Manager',
                lastName: 'User',
                role: 'MANAGER',
                isActive: true,
                emailVerified: true
            }
        });
        console.log(`‚úÖ Manager user created: ${managerUser.email}`);

        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        console.log('üë• Creating test customers...');
        const customers = await Promise.all([
            prisma.user.create({
                data: {
                    email: 'customer1@example.com',
                    password: '$2b$10$K7L/VQkgf8.3VrT0lQIeHOexNBl7OjJ8gw6rKr/hGz.kKY8sT3QXu',
                    firstName: '–ê–Ω–Ω–∞',
                    lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
                    phone: '+380501234567',
                    role: 'CUSTOMER',
                    isActive: true,
                    emailVerified: true
                }
            }),
            prisma.user.create({
                data: {
                    email: 'customer2@example.com',
                    password: '$2b$10$K7L/VQkgf8.3VrT0lQIeHOexNBl7OjJ8gw6rKr/hGz.kKY8sT3QXu',
                    firstName: '–ò–≤–∞–Ω',
                    lastName: '–°–∏–¥–æ—Ä–æ–≤',
                    phone: '+380679876543',
                    role: 'CUSTOMER',
                    isActive: true,
                    emailVerified: true
                }
            })
        ]);
        console.log(`‚úÖ Created ${customers.length} test customers`);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
        console.log('üìû Creating test callbacks...');
        const callbacks = await Promise.all([
            prisma.callback.create({
                data: {
                    name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
                    phone: '+380501111111',
                    email: 'maria@example.com',
                    message: '–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —à–∞—Ä—ã –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞',
                    status: 'NEW',
                    priority: 'MEDIUM',
                    source: 'website'
                }
            }),
            prisma.callback.create({
                data: {
                    name: '–ü–µ—Ç—Ä –í–∞—Å–∏–ª—å–µ–≤',
                    phone: '+380502222222',
                    message: '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–æ–≤ –Ω–∞ —Å–≤–∞–¥—å–±—É',
                    status: 'IN_PROGRESS',
                    priority: 'HIGH',
                    manager: 'Manager User',
                    source: 'phone'
                }
            })
        ]);
        console.log(`‚úÖ Created ${callbacks.length} test callbacks`);

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
        console.log('‚öôÔ∏è Creating site settings...');
        const settings = [
            {
                key: 'site_name',
                value: JSON.stringify('BalloonShop - –í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã'),
                type: 'string'
            },
            {
                key: 'site_description',
                value: JSON.stringify('–õ—É—á—à–∏–µ –≤–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞'),
                type: 'string'
            },
            {
                key: 'contact_phone',
                value: JSON.stringify('+380501234567'),
                type: 'string'
            },
            {
                key: 'contact_email',
                value: JSON.stringify('info@balloonshop.com'),
                type: 'string'
            },
            {
                key: 'delivery_price',
                value: JSON.stringify(150),
                type: 'number'
            },
            {
                key: 'free_delivery_from',
                value: JSON.stringify(1000),
                type: 'number'
            },
            {
                key: 'working_hours',
                value: JSON.stringify('–ü–Ω-–í—Å: 9:00-20:00'),
                type: 'string'
            }
        ];

        for (const setting of settings) {
            await prisma.settings.upsert({
                where: { key: setting.key },
                update: setting,
                create: setting
            });
        }
        console.log(`‚úÖ Created ${settings.length} site settings`);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('üìÑ Creating test pages...');
        const pages = [
            {
                slug: 'about',
                title: '–û –Ω–∞—Å',
                content: '<h1>–û –∫–æ–º–ø–∞–Ω–∏–∏ BalloonShop</h1><p>–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫—Ä–∞—Å–∏–≤—ã—Ö –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–æ–≤.</p>',
                excerpt: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                metaTitle: '–û –Ω–∞—Å - BalloonShop',
                metaDescription: '–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ BalloonShop –∏ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö',
                active: true
            },
            {
                slug: 'delivery',
                title: '–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞',
                content: '<h1>–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞</h1><p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Å–æ–±–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤.</p>',
                excerpt: '–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã',
                metaTitle: '–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞ - BalloonShop',
                metaDescription: '–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤ BalloonShop',
                active: true
            }
        ];

        for (const page of pages) {
            await prisma.page.upsert({
                where: { slug: page.slug },
                update: page,
                create: page
            });
        }
        console.log(`‚úÖ Created ${pages.length} test pages`);

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–Ω–Ω–µ—Ä—ã
        console.log('üé® Creating test banners...');
        const banners = [
            {
                title: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –Ω–∞–±–æ—Ä—ã!',
                subtitle: '–¢–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞',
                description: '–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –≤–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π',
                image: '/images/banners/discount-banner.jpg',
                buttonText: '–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å',
                buttonUrl: '/products',
                position: 'main',
                active: true,
                order: 1
            },
            {
                title: '–ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è 2025',
                subtitle: '–°–≤–µ–∂–∏–µ –¥–∏–∑–∞–π–Ω—ã',
                description: '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–±–æ—Ä—ã',
                image: '/images/banners/new-collection.jpg',
                buttonText: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                buttonUrl: '/products?filter=new',
                position: 'main',
                active: true,
                order: 2
            }
        ];

        for (const banner of banners) {
            await prisma.banner.create({
                data: banner
            });
        }
        console.log(`‚úÖ Created ${banners.length} test banners`);

        console.log('üéâ Database seeding completed successfully!');
        console.log('\nüìä Summary:');
        console.log(`- Categories: ${await prisma.category.count()}`);
        console.log(`- Products: ${await prisma.product.count()}`);
        console.log(`- Users: ${await prisma.user.count()}`);
        console.log(`- Callbacks: ${await prisma.callback.count()}`);
        console.log(`- Settings: ${await prisma.settings.count()}`);
        console.log(`- Pages: ${await prisma.page.count()}`);
        console.log(`- Banners: ${await prisma.banner.count()}`);

        console.log('\nüîë Test accounts:');
        console.log('Admin: admin@balloonshop.com / admin123');
        console.log('Manager: manager@balloonshop.com / admin123');
        console.log('Customer: customer1@example.com / admin123');

    } catch (error) {
        console.error('‚ùå Seeding failed:', error);
        throw error;
    }
}

main()
    .catch((e) => {
        console.error(e);
        process.exit(1);
    })
    .finally(async () => {
        await prisma.$disconnect();
    });