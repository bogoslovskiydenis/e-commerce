import crypto from 'crypto';
import bcrypt from 'bcrypt';
import { config } from '../config';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
export function generateRandomString(length: number): string {
    return crypto.randomBytes(Math.ceil(length / 2))
        .toString('hex')
        .slice(0, length);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞
export function generateApiKey(): string {
    const prefix = 'bs_'; // balloon shop
    const randomPart = generateRandomString(32);
    return `${prefix}${randomPart}`;
}

export async function hashPassword(password: string): Promise<string> {
    console.log('üîê hashPassword called with:', {
        password: password ? `${password.length} chars` : 'undefined/null',
        passwordType: typeof password,
        // bcryptRounds: config.bcryptRounds, // –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ
        // bcryptRoundsType: typeof config.bcryptRounds
    });

    if (!password) {
        throw new Error('Password is required');
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
    const BCRYPT_ROUNDS = 12;

    try {
        const hash = await bcrypt.hash(password, BCRYPT_ROUNDS);
        console.log('‚úÖ Hash created successfully, length:', hash.length);
        return hash;
    } catch (error) {
        console.error('‚ùå bcrypt.hash error:', error);
        throw error;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
export async function verifyPassword(password: string, hash: string): Promise<boolean> {
    return bcrypt.compare(password, hash);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ —Å—Ç—Ä–æ–∫–∏
export function generateSlug(text: string): string {
    return text
        .toLowerCase()
        .trim()
        .replace(/[^\w\s-]/g, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        .replace(/[\s_-]+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        .replace(/^-+|-+$/g, ''); // –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
export function formatPhoneNumber(phone: string): string {
    const cleaned = phone.replace(/\D/g, '');

    if (cleaned.length === 10) {
        return `+38${cleaned}`;
    } else if (cleaned.length === 12 && cleaned.startsWith('38')) {
        return `+${cleaned}`;
    }

    return phone;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email
export function isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
export function generateOrderNumber(): string {
    const timestamp = Date.now().toString();
    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
    return `BS${timestamp.slice(-6)}${random}`;
}

// –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏
export function calculateDiscount(price: number, discount: number, type: 'percentage' | 'fixed'): number {
    if (type === 'percentage') {
        return price * (discount / 100);
    }
    return Math.min(discount, price);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
export function formatCurrency(amount: number, currency = 'UAH'): string {
    return new Intl.NumberFormat('uk-UA', {
        style: 'currency',
        currency,
        minimumFractionDigits: 0,
        maximumFractionDigits: 2,
    }).format(amount);
}