// updateFullHash.js
import bcrypt from 'bcrypt';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function updateFullPasswordHash() {
    try {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è...');

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à
        const currentUser = await prisma.user.findUnique({
            where: { username: 'admin' },
            select: {
                username: true,
                passwordHash: true
            }
        });

        console.log('üìä –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
        console.log('üìä –î–ª–∏–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ö–µ—à–∞:', currentUser?.passwordHash?.length);
        console.log('üìä –¢–µ–∫—É—â–∏–π —Ö–µ—à:', currentUser?.passwordHash);

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π —Ö–µ—à –¥–ª—è –ø–∞—Ä–æ–ª—è "admin123"
        const correctHash = '$2b$12$LQv3c1yqBwEHFx8.9rI2HO2yfuZ/5P8bC2Qht9HQ5/9FG5M6y7K7K';
        console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–µ—à:', correctHash);
        console.log('‚úÖ –î–ª–∏–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞:', correctHash.length);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à
        const updatedUser = await prisma.user.update({
            where: { username: 'admin' },
            data: { passwordHash: correctHash },
            select: {
                username: true,
                passwordHash: true,
                email: true,
                isActive: true
            }
        });

        console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', updatedUser);
        console.log('üìä –ù–æ–≤–∞—è –¥–ª–∏–Ω–∞ —Ö–µ—à–∞:', updatedUser.passwordHash.length);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const isValid = await bcrypt.compare('admin123', correctHash);
        console.log('üîê –¢–µ—Å—Ç –ø–∞—Ä–æ–ª—è admin123:', isValid ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await prisma.$disconnect();
    }
}

updateFullPasswordHash();