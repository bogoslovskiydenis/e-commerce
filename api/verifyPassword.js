import bcrypt from 'bcrypt';

async function testPasswordHash() {
    const password = 'admin123';
    const storedHash = '$2b$12$LQv3c1yqBwEHFx8.9rI2HO2yfuZ/5P8bC2Qht9HQ5/9FG5M6y7K7K';
    const currentDbHash = '$2b$12$LQv3c1yqBwEHFx8.9rI2HO2'; // –ò–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    console.log('üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å:', password);
    console.log('üìä –•–µ—à –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∞–ª–æ):', currentDbHash);
    console.log('üìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–µ—à (–ø–æ–ª–Ω—ã–π):', storedHash);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–µ—à
    const test1 = await bcrypt.compare(password, storedHash);
    console.log('‚úÖ –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–µ—à–µ–º:', test1);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
    const newHash = await bcrypt.hash(password, 12);
    console.log('üîë –ù–æ–≤—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à:', newHash);

    const test2 = await bcrypt.compare(password, newHash);
    console.log('‚úÖ –¢–µ—Å—Ç —Å –Ω–æ–≤—ã–º —Ö–µ—à–µ–º:', test2);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    const possiblePasswords = ['admin', 'password', '123456', 'admin1234'];

    for (const testPassword of possiblePasswords) {
        const result = await bcrypt.compare(testPassword, storedHash);
        console.log(`üîç –¢–µ—Å—Ç –ø–∞—Ä–æ–ª—è "${testPassword}":`, result);
    }
}

testPasswordHash().catch(console.error);