'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import { Category, Product, apiService } from '@/services/api'

interface DynamicDropdownMenuProps {
    categoryType: string;
    categoryId: string;
    children?: Category[];
}

export function DynamicDropdownMenu({ categoryType, categoryId, children }: DynamicDropdownMenuProps) {
    const [subcategories, setSubcategories] = useState<Category[]>([]);
    const [featuredProducts, setFeaturedProducts] = useState<Product[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        loadDropdownData();
    }, [categoryType, categoryId]);

    const loadDropdownData = async () => {
        try {
            setIsLoading(true);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
            let categories: Category[] = [];
            if (children && children.length > 0) {
                categories = children;
            } else {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ apiService
                categories = await apiService.getCategoriesByType(categoryType);
            }

            setSubcategories(categories);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (categories.length > 0 || categoryId) {
                const products = await apiService.getFeaturedProducts(4);
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç–∏–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                const filteredProducts = products.filter(product => {
                    if (product.categoryId === categoryId) return true;
                    if (product.category === categoryType) return true;
                    return false;
                });
                setFeaturedProducts(filteredProducts.slice(0, 4));
            }
        } catch (error) {
            console.error('Error loading dropdown data:', error);
            setSubcategories([]);
            setFeaturedProducts([]);
        } finally {
            setIsLoading(false);
        }
    };

    const getCategoryIcon = (type: string): string => {
        const icons: Record<string, string> = {
            'balloons': 'üéà',
            'bouquets': 'üíê',
            'gifts': 'üéÅ',
            'cups': 'ü•§',
            'sets': 'üì¶',
            'events': 'üéâ',
            'occasions': '‚ú®',
            'colors': 'üåà',
            'materials': 'üè∑Ô∏è',
            'promotions': 'üî•'
        };
        return icons[type] || 'üìÇ';
    };

    if (isLoading) {
        return (
            <div className="p-4 w-96">
                <div className="animate-pulse space-y-3">
                    <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                    <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                    <div className="h-4 bg-gray-200 rounded w-2/3"></div>
                </div>
            </div>
        );
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    if (subcategories.length === 0 && featuredProducts.length === 0) {
        return null;
    }

    return (
        <div className="bg-white border border-gray-200 rounded-lg shadow-lg p-4 min-w-[400px] max-w-[600px]">
            <div className="grid grid-cols-2 gap-4">
                {/* –ö–æ–ª–æ–Ω–∫–∞ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ */}
                {subcategories.length > 0 && (
                    <div className="space-y-2">
                        <h3 className="text-sm font-semibold text-gray-900 mb-3 flex items-center gap-2">
                            <span>{getCategoryIcon(categoryType)}</span>
                            <span>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
                        </h3>
                        <div className="space-y-1">
                            {subcategories.map((subcategory) => (
                                <Link
                                    key={subcategory.id}
                                    href={`/${subcategory.slug}`}
                                    className="block px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 hover:text-teal-600 rounded-md transition-colors"
                                >
                                    <div className="flex items-center justify-between">
                                        <span>{subcategory.name}</span>
                                        {subcategory.productsCount !== undefined && subcategory.productsCount > 0 && (
                                            <span className="text-xs text-gray-400">
                                                ({subcategory.productsCount})
                                            </span>
                                        )}
                                    </div>
                                    {subcategory.description && (
                                        <p className="text-xs text-gray-500 mt-1 line-clamp-1">
                                            {subcategory.description}
                                        </p>
                                    )}
                                </Link>
                            ))}
                        </div>
                    </div>
                )}

                {/* –ö–æ–ª–æ–Ω–∫–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ */}
                {featuredProducts.length > 0 && (
                    <div className="space-y-2">
                        <h3 className="text-sm font-semibold text-gray-900 mb-3">
                            –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                        </h3>
                        <div className="space-y-3">
                            {featuredProducts.map((product) => (
                                <Link
                                    key={product.id}
                                    href={`/products/${product.id}`}
                                    className="block group"
                                >
                                    <div className="flex gap-3 p-2 hover:bg-gray-50 rounded-lg transition-colors">
                                        {/* –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Ç–æ–≤–∞—Ä–∞ */}
                                        <div className="relative w-16 h-16 flex-shrink-0 bg-gray-100 rounded-md overflow-hidden">
                                            {product.image ? (
                                                <Image
                                                    src={product.image}
                                                    alt={product.title || product.name || 'Product'}
                                                    fill
                                                    className="object-cover group-hover:scale-110 transition-transform duration-200"
                                                />
                                            ) : (
                                                <div className="w-full h-full flex items-center justify-center text-gray-400 text-2xl">
                                                    üéà
                                                </div>
                                            )}
                                        </div>

                                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                                        <div className="flex-1 min-w-0">
                                            <h4 className="text-sm font-medium text-gray-900 group-hover:text-teal-600 line-clamp-2 transition-colors">
                                                {product.title || product.name}
                                            </h4>
                                            <div className="mt-1 flex items-center gap-2">
                                                <span className="text-sm font-semibold text-teal-600">
                                                    {product.price} –≥—Ä–Ω
                                                </span>
                                                {product.oldPrice && (
                                                    <span className="text-xs text-gray-400 line-through">
                                                        {product.oldPrice} –≥—Ä–Ω
                                                    </span>
                                                )}
                                            </div>
                                            {product.discount && product.discount > 0 && (
                                                <span className="inline-block mt-1 text-xs font-medium text-red-600">
                                                    -{product.discount}%
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                </Link>
                            ))}
                        </div>
                    </div>
                )}
            </div>

            {/* –°—Å—ã–ª–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ" */}
            <div className="mt-4 pt-4 border-t border-gray-100">
                <Link
                    href={`/categories/${categoryId}`}
                    className="block text-center text-sm font-medium text-teal-600 hover:text-teal-700 transition-colors"
                >
                    –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã ‚Üí
                </Link>
            </div>
        </div>
    );
}