'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import { Category, Product, apiService } from '@/services/api'

interface DynamicDropdownMenuProps {
    categoryType: string;
    categoryId: string;
    children?: Category[];
}

export function DynamicDropdownMenu({ categoryType, categoryId, children }: DynamicDropdownMenuProps) {
    const [subcategories, setSubcategories] = useState<Category[]>([]);
    const [featuredProducts, setFeaturedProducts] = useState<Product[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        loadDropdownData();
    }, [categoryType, categoryId]);

    const loadDropdownData = async () => {
        try {
            setIsLoading(true);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
            let categories: Category[] = [];
            if (children && children.length > 0) {
                categories = children;
            } else {
                categories = await apiService.getCategoriesByType(categoryType);
            }

            setSubcategories(categories);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (categories.length > 0) {
                const products = await apiService.getFeaturedProducts(4);
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç–∏–ø—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                const filteredProducts = products.filter(product =>
                    product.category?.type === categoryType ||
                    product.categoryId === categoryId
                );
                setFeaturedProducts(filteredProducts.slice(0, 4));
            }
        } catch (error) {
            console.error('Error loading dropdown data:', error);
            setSubcategories([]);
            setFeaturedProducts([]);
        } finally {
            setIsLoading(false);
        }
    };

    const getCategoryIcon = (type: string) => {
        const icons: Record<string, string> = {
            'balloons': 'üéà',
            'bouquets': 'üíê',
            'gifts': 'üéÅ',
            'cups': 'ü•§',
            'sets': 'üì¶',
            'events': 'üéâ',
            'occasions': '‚ú®',
            'colors': 'üåà',
            'materials': 'üè∑Ô∏è'
        };
        return icons[type] || 'üìÇ';
    };

    if (isLoading) {
        return (
            <div className="p-4 w-96">
                <div className="animate-pulse">
                    <div className="flex space-x-4">
                        <div className="flex-1">
                            <div className="h-4 bg-gray-200 rounded mb-2"></div>
                            <div className="h-3 bg-gray-200 rounded mb-1"></div>
                            <div className="h-3 bg-gray-200 rounded mb-1"></div>
                            <div className="h-3 bg-gray-200 rounded"></div>
                        </div>
                        <div className="flex-1">
                            <div className="h-4 bg-gray-200 rounded mb-2"></div>
                            <div className="h-20 bg-gray-200 rounded"></div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="dropdown-content p-6 max-w-4xl">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {/* –ü–æ–¥–∫ateg–æ—Ä–∏–∏ */}
                {subcategories.length > 0 && (
                    <div className="space-y-2">
                        <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                            {getCategoryIcon(categoryType)}
                            <span className="ml-2">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
                        </h3>
                        <ul className="space-y-2">
                            {subcategories.slice(0, 8).map((category) => (
                                <li key={category.id}>
                                    <Link
                                        href={category.href || `/${category.slug}`}
                                        className="flex items-center justify-between py-2 px-3 rounded-lg hover:bg-gray-50 transition-colors group"
                                    >
                                        <span className="text-sm text-gray-700 group-hover:text-teal-600">
                                            {category.name}
                                        </span>
                                        {category.productsCount > 0 && (
                                            <span className="text-xs text-gray-400">
                                                {category.productsCount}
                                            </span>
                                        )}
                                    </Link>
                                </li>
                            ))}
                        </ul>

                        {subcategories.length > 8 && (
                            <Link
                                href={`/${categoryType}`}
                                className="text-sm text-teal-600 hover:text-teal-700 font-medium"
                            >
                                –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ‚Üí
                            </Link>
                        )}
                    </div>
                )}

                {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã */}
                {featuredProducts.length > 0 && (
                    <div className="space-y-3">
                        <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                            ‚≠ê <span className="ml-2">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</span>
                        </h3>
                        <div className="space-y-3">
                            {featuredProducts.map((product) => (
                                <Link
                                    key={product.id}
                                    href={`/products/${product.slug}`}
                                    className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors group"
                                >
                                    {product.imageUrl && (
                                        <div className="w-12 h-12 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0">
                                            <Image
                                                src={product.imageUrl}
                                                alt={product.name}
                                                width={48}
                                                height={48}
                                                className="w-full h-full object-cover"
                                            />
                                        </div>
                                    )}
                                    <div className="flex-1 min-w-0">
                                        <p className="text-sm font-medium text-gray-900 group-hover:text-teal-600 truncate">
                                            {product.name}
                                        </p>
                                        <div className="flex items-center space-x-2">
                                            <span className="text-sm font-semibold text-teal-600">
                                                {product.price}‚Ç¥
                                            </span>
                                            {product.oldPrice && (
                                                <span className="text-xs text-gray-400 line-through">
                                                    {product.oldPrice}‚Ç¥
                                                </span>
                                            )}
                                        </div>
                                    </div>
                                </Link>
                            ))}
                        </div>
                    </div>
                )}

                {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è */}
                <div className="space-y-3">
                    <h3 className="font-semibold text-gray-900 mb-3 flex items-center">
                        üî• <span className="ml-2">–ê–∫—Ü–∏–∏</span>
                    </h3>
                    <div className="bg-gradient-to-r from-red-50 to-pink-50 rounded-lg p-4 border border-red-100">
                        <div className="text-sm font-semibold text-red-600 mb-1">
                            –°–∫–∏–¥–∫–∞ –¥–æ 30%
                        </div>
                        <div className="text-xs text-gray-600 mb-2">
                            –ù–∞ –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç {getCategoryName(categoryType)}
                        </div>
                        <Link
                            href={`/sale?category=${categoryType}`}
                            className="text-xs text-red-600 hover:text-red-700 font-medium"
                        >
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                        </Link>
                    </div>

                    <div className="bg-gradient-to-r from-blue-50 to-teal-50 rounded-lg p-4 border border-blue-100">
                        <div className="text-sm font-semibold text-teal-600 mb-1">
                            –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
                        </div>
                        <div className="text-xs text-gray-600 mb-2">
                            –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 500‚Ç¥
                        </div>
                        <Link
                            href="/delivery"
                            className="text-xs text-teal-600 hover:text-teal-700 font-medium"
                        >
                            –£—Å–ª–æ–≤–∏—è ‚Üí
                        </Link>
                    </div>
                </div>
            </div>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="mt-6 pt-4 border-t border-gray-100">
                <div className="flex justify-between items-center">
                    <Link
                        href={`/${categoryType}`}
                        className="text-sm text-teal-600 hover:text-teal-700 font-medium"
                    >
                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ {getCategoryName(categoryType).toLowerCase()}
                    </Link>
                    <div className="flex space-x-3 text-xs text-gray-500">
                        <Link href="/compare" className="hover:text-gray-700">
                            –°—Ä–∞–≤–Ω–∏—Ç—å
                        </Link>
                        <Link href="/wishlist" className="hover:text-gray-700">
                            –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
                        </Link>
                    </div>
                </div>
            </div>
        </div>
    );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryName(type: string): string {
    const names: Record<string, string> = {
        'balloons': '–®–∞—Ä–∏–∫–∏',
        'bouquets': '–ë—É–∫–µ—Ç—ã',
        'gifts': '–ü–æ–¥–∞—Ä–∫–∏',
        'cups': '–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏',
        'sets': '–ù–∞–±–æ—Ä—ã',
        'events': '–°–æ–±—ã—Ç–∏—è',
        'occasions': '–ü–æ–≤–æ–¥—ã'
    };
    return names[type] || '–¢–æ–≤–∞—Ä—ã';
}