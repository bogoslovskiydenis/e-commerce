import Image from 'next/image'
import Link from 'next/link'
import { Heart, ShoppingBag } from 'lucide-react'

interface ProductCardProps {
    id: string
    name: string
    type: 'foil' | 'latex' | 'bouquet' | 'set' | 'cup' | 'plush' | 'souvenir' | 'jewelry' | 'sweets' | 'flowers' | 'gift set'
    price: number
    oldPrice?: number
    discount?: number
    image: string
    category: string
    withHelium?: boolean
    size?: string
    colors?: string[]
    material?: string
    inStock: boolean
    className?: string
    basePath?: string // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
}

export default function ProductCard({
                                        id,
                                        name,
                                        type,
                                        price,
                                        oldPrice,
                                        discount,
                                        image,
                                        category,
                                        withHelium = false,
                                        size,
                                        colors = [],
                                        material,
                                        inStock = true,
                                        className = "",
                                        basePath = "/balloons" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º balloons
                                    }: ProductCardProps) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –±–µ–π–¥–∂–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const getMaterialBadgeColor = (material?: string) => {
        switch (material) {
            case '–§–æ–ª—å–≥–∞':
                return 'bg-blue-100 text-blue-700'
            case '–õ–∞—Ç–µ–∫—Å':
                return 'bg-pink-100 text-pink-700'
            default:
                return 'bg-gray-100 text-gray-700'
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–æ—á–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
    const getColorDot = (colorName: string) => {
        const colorMap: Record<string, string> = {
            '–ö—Ä–∞—Å–Ω—ã–π': 'bg-red-500',
            '–°–∏–Ω–∏–π': 'bg-blue-500',
            '–†–æ–∑–æ–≤—ã–π': 'bg-pink-500',
            '–ó–æ–ª–æ—Ç–æ–π': 'bg-yellow-500',
            '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π': 'bg-gray-400',
            '–ó–µ–ª–µ–Ω—ã–π': 'bg-green-500',
        }
        return colorMap[colorName] || 'bg-gray-400'
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const productLink = `${basePath}/${category}/${id}`

    return (
        <div className={`group relative flex flex-col h-full bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow ${className}`}>
            <div className="aspect-square overflow-hidden bg-gray-100 relative">
                <Link href={productLink}>
                    <Image
                        src={image}
                        alt={name}
                        width={300}
                        height={300}
                        className="h-full w-full object-cover object-center transition-transform duration-300 group-hover:scale-105"
                    />
                </Link>

                {/* –°–∫–∏–¥–∫–∞ */}
                {discount && discount > 0 && (
                    <div className="absolute top-3 left-3 bg-red-500 text-white px-2 py-1 rounded text-sm font-medium">
                        -{discount}%
                    </div>
                )}

                {/* –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ */}
                {!inStock && (
                    <div className="absolute top-3 right-3 bg-gray-500 text-white px-2 py-1 rounded text-sm">
                        –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
                    </div>
                )}

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <div className="absolute top-3 right-3 flex flex-col gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    <button
                        className="p-2 rounded-full bg-white shadow-md hover:bg-gray-50"
                        aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                    >
                        <Heart size={20} />
                    </button>
                    {inStock && (
                        <button
                            className="p-2 rounded-full bg-teal-600 text-white shadow-md hover:bg-teal-700"
                            aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
                        >
                            <ShoppingBag size={20} />
                        </button>
                    )}
                </div>

                {/* –ë–µ–π–¥–∂ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É */}
                {material && (
                    <div className="absolute bottom-3 left-3">
                        <span className={`inline-block px-2 py-1 rounded text-xs font-medium ${getMaterialBadgeColor(material)}`}>
                            {material}
                        </span>
                    </div>
                )}
            </div>

            <div className="p-4 flex flex-col flex-grow">
                <Link href={productLink} className="mb-2">
                    <h3 className="text-sm font-medium text-gray-900 hover:text-teal-600 line-clamp-2 h-10">
                        {name}
                    </h3>
                </Link>

                {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ */}
                <div className="mb-3 flex flex-wrap gap-2 text-xs">
                    {size && (
                        <div className="flex items-center gap-1 text-gray-600">
                            <span>üìè</span>
                            <span>{size}</span>
                        </div>
                    )}

                    {withHelium && (
                        <div className="flex items-center gap-1 text-blue-600">
                            <span>‚úàÔ∏è</span>
                            <span>–° –≥–µ–ª–∏–µ–º</span>
                        </div>
                    )}

                    {colors && colors.length > 0 && (
                        <div className="flex items-center gap-1">
                            <div className={`w-3 h-3 rounded-full ${getColorDot(colors[0])}`}></div>
                            <span className="text-gray-600">{colors[0]}</span>
                        </div>
                    )}
                </div>

                {/* –¶–µ–Ω–∞ */}
                <div className="mt-auto">
                    <div className="flex items-center gap-2 mb-3">
                        <span className="text-lg font-bold text-gray-900">{price} –≥—Ä–Ω</span>
                        {oldPrice && (
                            <span className="text-sm text-gray-500 line-through">
                                {oldPrice} –≥—Ä–Ω
                            </span>
                        )}
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ */}
                    {inStock ? (
                        <button className="w-full bg-teal-600 text-white py-2 rounded-lg hover:bg-teal-700 text-sm font-medium transition-colors">
                            –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑
                        </button>
                    ) : (
                        <button className="w-full bg-gray-300 text-gray-600 py-2 rounded-lg text-sm font-medium cursor-not-allowed">
                            –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
                        </button>
                    )}
                </div>
            </div>
        </div>
    )
}